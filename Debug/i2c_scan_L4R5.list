
i2c_scan_L4R5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000532c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080054ec  080054ec  000064ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055c8  080055c8  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080055c8  080055c8  000065c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d0  080055d0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d0  080055d0  000065d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055d4  080055d4  000065d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20040000  080055d8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20040068  08005640  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200402c0  08005640  000072c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001038f  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a1  00000000  00000000  00017427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  000195c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a96  00000000  00000000  0001a370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a87c  00000000  00000000  0001ae06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c8e  00000000  00000000  00045682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101cf6  00000000  00000000  00056310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158006  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a4  00000000  00000000  0015804c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  0015c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040068 	.word	0x20040068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080054d4 	.word	0x080054d4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2004006c 	.word	0x2004006c
 80001fc:	080054d4 	.word	0x080054d4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fd6c 	bl	80010ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f853 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f92f 	bl	800083c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005de:	f000 f8a1 	bl	8000724 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80005e2:	f000 f8df 	bl	80007a4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char uart2Data[24] = "i2c_scan_L4R5: Connected to UART LPUART1\r\n";
 80005e6:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <main+0x9c>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005f4:	e884 0003 	stmia.w	r4, {r0, r1}
     /*
      * Output to uart2
      * use screen or putty or whatever terminal software
      * 8N1 115200
      */
     HAL_UART_Transmit(&hlpuart1, (uint8_t *)&uart2Data,sizeof(uart2Data), 10);
 80005f8:	1d39      	adds	r1, r7, #4
 80005fa:	230a      	movs	r3, #10
 80005fc:	2218      	movs	r2, #24
 80005fe:	481b      	ldr	r0, [pc, #108]	@ (800066c <main+0xa0>)
 8000600:	f003 f8f6 	bl	80037f0 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */printf("\r\n");
 8000604:	481a      	ldr	r0, [pc, #104]	@ (8000670 <main+0xa4>)
 8000606:	f004 f8d1 	bl	80047ac <puts>

   	printf("Scanning I2C bus:\r\n");
 800060a:	481a      	ldr	r0, [pc, #104]	@ (8000674 <main+0xa8>)
 800060c:	f004 f8ce 	bl	80047ac <puts>
  	HAL_StatusTypeDef result;
   	uint8_t i;
   	for (i=1; i<128; i++)
 8000610:	2301      	movs	r3, #1
 8000612:	77fb      	strb	r3, [r7, #31]
 8000614:	e01b      	b.n	800064e <main+0x82>
   	   * &hi2c1 is the handle
   	   * (uint16_t)(i<<1) is the i2c address left aligned
   	   * retries 2
   	   * timeout 2
   	   */
   	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 8000616:	7ffb      	ldrb	r3, [r7, #31]
 8000618:	b29b      	uxth	r3, r3
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	b299      	uxth	r1, r3
 800061e:	2302      	movs	r3, #2
 8000620:	2202      	movs	r2, #2
 8000622:	4815      	ldr	r0, [pc, #84]	@ (8000678 <main+0xac>)
 8000624:	f001 f8ef 	bl	8001806 <HAL_I2C_IsDeviceReady>
 8000628:	4603      	mov	r3, r0
 800062a:	77bb      	strb	r3, [r7, #30]
   	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 800062c:	7fbb      	ldrb	r3, [r7, #30]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <main+0x6c>
   	  {
   		  printf("."); // No ACK received at that address
 8000632:	202e      	movs	r0, #46	@ 0x2e
 8000634:	f004 f85c 	bl	80046f0 <putchar>
   	  }
   	  if (result == HAL_OK)
 8000638:	7fbb      	ldrb	r3, [r7, #30]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d104      	bne.n	8000648 <main+0x7c>
   	  {
   		  printf("0x%X", i); // Received an ACK at that address
 800063e:	7ffb      	ldrb	r3, [r7, #31]
 8000640:	4619      	mov	r1, r3
 8000642:	480e      	ldr	r0, [pc, #56]	@ (800067c <main+0xb0>)
 8000644:	f004 f842 	bl	80046cc <iprintf>
   	for (i=1; i<128; i++)
 8000648:	7ffb      	ldrb	r3, [r7, #31]
 800064a:	3301      	adds	r3, #1
 800064c:	77fb      	strb	r3, [r7, #31]
 800064e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000652:	2b00      	cmp	r3, #0
 8000654:	dadf      	bge.n	8000616 <main+0x4a>
   	  }
   	}
   	printf("\r\n");
 8000656:	4806      	ldr	r0, [pc, #24]	@ (8000670 <main+0xa4>)
 8000658:	f004 f8a8 	bl	80047ac <puts>
   	HAL_Delay(500);	//Delay half a second
 800065c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000660:	f000 fd9a 	bl	8001198 <HAL_Delay>
  {
 8000664:	e7ce      	b.n	8000604 <main+0x38>
 8000666:	bf00      	nop
 8000668:	0800550c 	.word	0x0800550c
 800066c:	200400d8 	.word	0x200400d8
 8000670:	080054ec 	.word	0x080054ec
 8000674:	080054f0 	.word	0x080054f0
 8000678:	20040084 	.word	0x20040084
 800067c:	08005504 	.word	0x08005504

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b096      	sub	sp, #88	@ 0x58
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2244      	movs	r2, #68	@ 0x44
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 f894 	bl	80047bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006a6:	f001 fbaf 	bl	8001e08 <HAL_PWREx_ControlVoltageScaling>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b0:	f000 fb08 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006b4:	2310      	movs	r3, #16
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c0:	2360      	movs	r3, #96	@ 0x60
 80006c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c8:	2301      	movs	r3, #1
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006d0:	2310      	movs	r3, #16
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fc43 	bl	8001f70 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006f0:	f000 fae8 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2303      	movs	r3, #3
 80006fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	2101      	movs	r1, #1
 800070c:	4618      	mov	r0, r3
 800070e:	f002 f849 	bl	80027a4 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000718:	f000 fad4 	bl	8000cc4 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3758      	adds	r7, #88	@ 0x58
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_I2C1_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	@ (800079c <MX_I2C1_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800072e:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000730:	4a1b      	ldr	r2, [pc, #108]	@ (80007a0 <MX_I2C1_Init+0x7c>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_I2C1_Init+0x74>)
 800073c:	2201      	movs	r2, #1
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075e:	480e      	ldr	r0, [pc, #56]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000760:	f000 ffb6 	bl	80016d0 <HAL_I2C_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800076a:	f000 faab 	bl	8000cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076e:	2100      	movs	r1, #0
 8000770:	4809      	ldr	r0, [pc, #36]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000772:	f001 fa91 	bl	8001c98 <HAL_I2CEx_ConfigAnalogFilter>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800077c:	f000 faa2 	bl	8000cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000780:	2100      	movs	r1, #0
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000784:	f001 fad3 	bl	8001d2e <HAL_I2CEx_ConfigDigitalFilter>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800078e:	f000 fa99 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20040084 	.word	0x20040084
 800079c:	40005400 	.word	0x40005400
 80007a0:	00b07cb4 	.word	0x00b07cb4

080007a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007a8:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 80007aa:	4a23      	ldr	r2, [pc, #140]	@ (8000838 <MX_LPUART1_UART_Init+0x94>)
 80007ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007da:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007ec:	4811      	ldr	r0, [pc, #68]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 80007ee:	f002 ffaf 	bl	8003750 <HAL_UART_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80007f8:	f000 fa64 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	480d      	ldr	r0, [pc, #52]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 8000800:	f003 fdd8 	bl	80043b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800080a:	f000 fa5b 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4808      	ldr	r0, [pc, #32]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 8000812:	f003 fe0d 	bl	8004430 <HAL_UARTEx_SetRxFifoThreshold>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800081c:	f000 fa52 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	@ (8000834 <MX_LPUART1_UART_Init+0x90>)
 8000822:	f003 fd8e 	bl	8004342 <HAL_UARTEx_DisableFifoMode>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800082c:	f000 fa4a 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200400d8 	.word	0x200400d8
 8000838:	40008000 	.word	0x40008000

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	@ 0x38
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000852:	4bb2      	ldr	r3, [pc, #712]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4ab1      	ldr	r2, [pc, #708]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 8000858:	f043 0310 	orr.w	r3, r3, #16
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4baf      	ldr	r3, [pc, #700]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0310 	and.w	r3, r3, #16
 8000866:	623b      	str	r3, [r7, #32]
 8000868:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4bac      	ldr	r3, [pc, #688]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4aab      	ldr	r2, [pc, #684]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4ba9      	ldr	r3, [pc, #676]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	61fb      	str	r3, [r7, #28]
 8000880:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000882:	4ba6      	ldr	r3, [pc, #664]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4aa5      	ldr	r2, [pc, #660]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 8000888:	f043 0320 	orr.w	r3, r3, #32
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4ba3      	ldr	r3, [pc, #652]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0320 	and.w	r3, r3, #32
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	4ba0      	ldr	r3, [pc, #640]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a9f      	ldr	r2, [pc, #636]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b9d      	ldr	r3, [pc, #628]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b9a      	ldr	r3, [pc, #616]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	4a99      	ldr	r2, [pc, #612]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008be:	4b97      	ldr	r3, [pc, #604]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b94      	ldr	r3, [pc, #592]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	4a93      	ldr	r2, [pc, #588]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d6:	4b91      	ldr	r3, [pc, #580]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	4b8e      	ldr	r3, [pc, #568]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a8d      	ldr	r2, [pc, #564]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b8b      	ldr	r3, [pc, #556]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fa:	4b88      	ldr	r3, [pc, #544]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a87      	ldr	r2, [pc, #540]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 8000900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b85      	ldr	r3, [pc, #532]	@ (8000b1c <MX_GPIO_Init+0x2e0>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000912:	f001 fb1d 	bl	8001f50 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000916:	230c      	movs	r3, #12
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000926:	230d      	movs	r3, #13
 8000928:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	487b      	ldr	r0, [pc, #492]	@ (8000b20 <MX_GPIO_Init+0x2e4>)
 8000932:	f000 fd3b 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000936:	2307      	movs	r3, #7
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093a:	2312      	movs	r3, #18
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093e:	2301      	movs	r3, #1
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000946:	2304      	movs	r3, #4
 8000948:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800094a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094e:	4619      	mov	r1, r3
 8000950:	4874      	ldr	r0, [pc, #464]	@ (8000b24 <MX_GPIO_Init+0x2e8>)
 8000952:	f000 fd2b 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000956:	2380      	movs	r3, #128	@ 0x80
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000966:	230d      	movs	r3, #13
 8000968:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800096a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	486c      	ldr	r0, [pc, #432]	@ (8000b24 <MX_GPIO_Init+0x2e8>)
 8000972:	f000 fd1b 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000976:	233f      	movs	r3, #63	@ 0x3f
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800097a:	230b      	movs	r3, #11
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	4867      	ldr	r0, [pc, #412]	@ (8000b28 <MX_GPIO_Init+0x2ec>)
 800098a:	f000 fd0f 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800098e:	2301      	movs	r3, #1
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800099e:	2301      	movs	r3, #1
 80009a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ac:	f000 fcfe 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80009b0:	230a      	movs	r3, #10
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009b4:	230b      	movs	r3, #11
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c6:	f000 fcf1 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009ca:	23f0      	movs	r3, #240	@ 0xf0
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009da:	2305      	movs	r3, #5
 80009dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e8:	f000 fce0 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ec:	2301      	movs	r3, #1
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009fc:	2302      	movs	r3, #2
 80009fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	4849      	ldr	r0, [pc, #292]	@ (8000b2c <MX_GPIO_Init+0x2f0>)
 8000a08:	f000 fcd0 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a10:	230b      	movs	r3, #11
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4843      	ldr	r0, [pc, #268]	@ (8000b2c <MX_GPIO_Init+0x2f0>)
 8000a20:	f000 fcc4 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000a24:	2344      	movs	r3, #68	@ 0x44
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	483d      	ldr	r0, [pc, #244]	@ (8000b2c <MX_GPIO_Init+0x2f0>)
 8000a38:	f000 fcb8 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a3c:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4831      	ldr	r0, [pc, #196]	@ (8000b20 <MX_GPIO_Init+0x2e4>)
 8000a5a:	f000 fca7 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a5e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000a70:	2303      	movs	r3, #3
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4829      	ldr	r0, [pc, #164]	@ (8000b20 <MX_GPIO_Init+0x2e4>)
 8000a7c:	f000 fc96 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a92:	2301      	movs	r3, #1
 8000a94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4823      	ldr	r0, [pc, #140]	@ (8000b2c <MX_GPIO_Init+0x2f0>)
 8000a9e:	f000 fc85 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000aa2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000ab4:	230d      	movs	r3, #13
 8000ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	481b      	ldr	r0, [pc, #108]	@ (8000b2c <MX_GPIO_Init+0x2f0>)
 8000ac0:	f000 fc74 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ac4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000ad6:	230e      	movs	r3, #14
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4812      	ldr	r0, [pc, #72]	@ (8000b2c <MX_GPIO_Init+0x2f0>)
 8000ae2:	f000 fc63 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ae6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000af8:	2307      	movs	r3, #7
 8000afa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <MX_GPIO_Init+0x2f4>)
 8000b04:	f000 fc52 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b08:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e00c      	b.n	8000b34 <MX_GPIO_Init+0x2f8>
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48001000 	.word	0x48001000
 8000b24:	48001400 	.word	0x48001400
 8000b28:	48000800 	.word	0x48000800
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	48000c00 	.word	0x48000c00
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b36:	2302      	movs	r3, #2
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4853      	ldr	r0, [pc, #332]	@ (8000c90 <MX_GPIO_Init+0x454>)
 8000b42:	f000 fc33 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b46:	2340      	movs	r3, #64	@ 0x40
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000b56:	230d      	movs	r3, #13
 8000b58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	484c      	ldr	r0, [pc, #304]	@ (8000c94 <MX_GPIO_Init+0x458>)
 8000b62:	f000 fc23 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b66:	2380      	movs	r3, #128	@ 0x80
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b76:	2302      	movs	r3, #2
 8000b78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4844      	ldr	r0, [pc, #272]	@ (8000c94 <MX_GPIO_Init+0x458>)
 8000b82:	f000 fc13 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b86:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	483c      	ldr	r0, [pc, #240]	@ (8000c94 <MX_GPIO_Init+0x458>)
 8000ba4:	f000 fc02 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000ba8:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bba:	230a      	movs	r3, #10
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f000 fbf0 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be4:	f000 fbe2 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000be8:	2301      	movs	r3, #1
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bf8:	2309      	movs	r3, #9
 8000bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	4823      	ldr	r0, [pc, #140]	@ (8000c90 <MX_GPIO_Init+0x454>)
 8000c04:	f000 fbd2 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	481b      	ldr	r0, [pc, #108]	@ (8000c90 <MX_GPIO_Init+0x454>)
 8000c24:	f000 fbc2 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000c28:	2378      	movs	r3, #120	@ 0x78
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4813      	ldr	r0, [pc, #76]	@ (8000c90 <MX_GPIO_Init+0x454>)
 8000c44:	f000 fbb2 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c48:	2338      	movs	r3, #56	@ 0x38
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c58:	2306      	movs	r3, #6
 8000c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <MX_GPIO_Init+0x45c>)
 8000c64:	f000 fba2 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c80:	4619      	mov	r1, r3
 8000c82:	4806      	ldr	r0, [pc, #24]	@ (8000c9c <MX_GPIO_Init+0x460>)
 8000c84:	f000 fb92 	bl	80013ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c88:	bf00      	nop
 8000c8a:	3738      	adds	r7, #56	@ 0x38
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	48000c00 	.word	0x48000c00
 8000c94:	48000800 	.word	0x48000800
 8000c98:	48000400 	.word	0x48000400
 8000c9c:	48001000 	.word	0x48001000

08000ca0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
int __io_putchar(int ch)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 10);
 8000ca8:	1d39      	adds	r1, r7, #4
 8000caa:	230a      	movs	r3, #10
 8000cac:	2201      	movs	r2, #1
 8000cae:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <__io_putchar+0x20>)
 8000cb0:	f002 fd9e 	bl	80037f0 <HAL_UART_Transmit>

  return ch;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200400d8 	.word	0x200400d8

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <Error_Handler+0x8>

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <HAL_MspInit+0x44>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cda:	4a0e      	ldr	r2, [pc, #56]	@ (8000d14 <HAL_MspInit+0x44>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <HAL_MspInit+0x44>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <HAL_MspInit+0x44>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf2:	4a08      	ldr	r2, [pc, #32]	@ (8000d14 <HAL_MspInit+0x44>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_MspInit+0x44>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0ae      	sub	sp, #184	@ 0xb8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	2294      	movs	r2, #148	@ 0x94
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 fd3f 	bl	80047bc <memset>
  if(hi2c->Instance==I2C1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a21      	ldr	r2, [pc, #132]	@ (8000dc8 <HAL_I2C_MspInit+0xb0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d13b      	bne.n	8000dc0 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d48:	2340      	movs	r3, #64	@ 0x40
 8000d4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 ffe3 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d60:	f7ff ffb0 	bl	8000cc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d68:	4a18      	ldr	r2, [pc, #96]	@ (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d70:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d84:	2312      	movs	r3, #18
 8000d86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d96:	2304      	movs	r3, #4
 8000d98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000da0:	4619      	mov	r1, r3
 8000da2:	480b      	ldr	r0, [pc, #44]	@ (8000dd0 <HAL_I2C_MspInit+0xb8>)
 8000da4:	f000 fb02 	bl	80013ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000dae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dc0:	bf00      	nop
 8000dc2:	37b8      	adds	r7, #184	@ 0xb8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000400 	.word	0x48000400

08000dd4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b0ae      	sub	sp, #184	@ 0xb8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2294      	movs	r2, #148	@ 0x94
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 fce1 	bl	80047bc <memset>
  if(huart->Instance==LPUART1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a22      	ldr	r2, [pc, #136]	@ (8000e88 <HAL_UART_MspInit+0xb4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d13d      	bne.n	8000e80 <HAL_UART_MspInit+0xac>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e04:	2320      	movs	r3, #32
 8000e06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 ff85 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e1c:	f7ff ff52 	bl	8000cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_UART_MspInit+0xb8>)
 8000e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e24:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <HAL_UART_MspInit+0xb8>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <HAL_UART_MspInit+0xb8>)
 8000e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e38:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <HAL_UART_MspInit+0xb8>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3c:	4a13      	ldr	r2, [pc, #76]	@ (8000e8c <HAL_UART_MspInit+0xb8>)
 8000e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <HAL_UART_MspInit+0xb8>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000e50:	f001 f87e 	bl	8001f50 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e54:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e6e:	2308      	movs	r3, #8
 8000e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <HAL_UART_MspInit+0xbc>)
 8000e7c:	f000 fa96 	bl	80013ac <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000e80:	bf00      	nop
 8000e82:	37b8      	adds	r7, #184	@ 0xb8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40008000 	.word	0x40008000
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	48001800 	.word	0x48001800

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <NMI_Handler+0x4>

08000e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000ebc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eea:	f000 f935 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e00a      	b.n	8000f1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f04:	f3af 8000 	nop.w
 8000f08:	4601      	mov	r1, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	60ba      	str	r2, [r7, #8]
 8000f10:	b2ca      	uxtb	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbf0      	blt.n	8000f04 <_read+0x12>
  }

  return len;
 8000f22:	687b      	ldr	r3, [r7, #4]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e009      	b.n	8000f52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	60ba      	str	r2, [r7, #8]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff feaa 	bl	8000ca0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbf1      	blt.n	8000f3e <_write+0x12>
  }
  return len;
 8000f5a:	687b      	ldr	r3, [r7, #4]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_close>:

int _close(int file)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f8c:	605a      	str	r2, [r3, #4]
  return 0;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_isatty>:

int _isatty(int file)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b085      	sub	sp, #20
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd4:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <_sbrk+0x5c>)
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <_sbrk+0x60>)
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <_sbrk+0x64>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <_sbrk+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d207      	bcs.n	800100c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ffc:	f003 fbe6 	bl	80047cc <__errno>
 8001000:	4603      	mov	r3, r0
 8001002:	220c      	movs	r2, #12
 8001004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800100a:	e009      	b.n	8001020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <_sbrk+0x64>)
 800101c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200a0000 	.word	0x200a0000
 800102c:	00000400 	.word	0x00000400
 8001030:	2004016c 	.word	0x2004016c
 8001034:	200402c0 	.word	0x200402c0

08001038 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <SystemInit+0x20>)
 800103e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001042:	4a05      	ldr	r2, [pc, #20]	@ (8001058 <SystemInit+0x20>)
 8001044:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001048:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800105c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001094 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001060:	f7ff ffea 	bl	8001038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <LoopForever+0x6>)
  ldr r1, =_edata
 8001066:	490d      	ldr	r1, [pc, #52]	@ (800109c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <LoopForever+0xe>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800107c:	4c0a      	ldr	r4, [pc, #40]	@ (80010a8 <LoopForever+0x16>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108a:	f003 fba5 	bl	80047d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800108e:	f7ff fa9d 	bl	80005cc <main>

08001092 <LoopForever>:

LoopForever:
    b LoopForever
 8001092:	e7fe      	b.n	8001092 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001094:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001098:	20040000 	.word	0x20040000
  ldr r1, =_edata
 800109c:	20040068 	.word	0x20040068
  ldr r2, =_sidata
 80010a0:	080055d8 	.word	0x080055d8
  ldr r2, =_sbss
 80010a4:	20040068 	.word	0x20040068
  ldr r4, =_ebss
 80010a8:	200402c0 	.word	0x200402c0

080010ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC1_IRQHandler>

080010ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f943 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f80e 	bl	80010e0 <HAL_InitTick>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	e001      	b.n	80010d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d0:	f7ff fdfe 	bl	8000cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <HAL_InitTick+0x6c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d023      	beq.n	800113c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010f4:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <HAL_InitTick+0x70>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <HAL_InitTick+0x6c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f941 	bl	8001392 <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10f      	bne.n	8001136 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d809      	bhi.n	8001130 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001124:	f000 f919 	bl	800135a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001128:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <HAL_InitTick+0x74>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e007      	b.n	8001140 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e004      	b.n	8001140 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e001      	b.n	8001140 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001140:	7bfb      	ldrb	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20040008 	.word	0x20040008
 8001150:	20040000 	.word	0x20040000
 8001154:	20040004 	.word	0x20040004

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	@ (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20040008 	.word	0x20040008
 800117c:	20040170 	.word	0x20040170

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20040170 	.word	0x20040170

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011b2:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20040008 	.word	0x20040008

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	@ (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	@ (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	@ 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	@ 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001324:	f7ff ff8e 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff47 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff5c 	bl	8001228 <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff8e 	bl	8001298 <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5d 	bl	8001244 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffb0 	bl	8001300 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	e166      	b.n	800168a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2101      	movs	r1, #1
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8158 	beq.w	8001684 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d005      	beq.n	80013ec <HAL_GPIO_Init+0x40>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d130      	bne.n	800144e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001422:	2201      	movs	r2, #1
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	f003 0201 	and.w	r2, r3, #1
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b03      	cmp	r3, #3
 8001458:	d017      	beq.n	800148a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d123      	bne.n	80014de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3208      	adds	r2, #8
 800149e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691a      	ldr	r2, [r3, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	08da      	lsrs	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3208      	adds	r2, #8
 80014d8:	6939      	ldr	r1, [r7, #16]
 80014da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0203 	and.w	r2, r3, #3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80b2 	beq.w	8001684 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001520:	4b61      	ldr	r3, [pc, #388]	@ (80016a8 <HAL_GPIO_Init+0x2fc>)
 8001522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001524:	4a60      	ldr	r2, [pc, #384]	@ (80016a8 <HAL_GPIO_Init+0x2fc>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6613      	str	r3, [r2, #96]	@ 0x60
 800152c:	4b5e      	ldr	r3, [pc, #376]	@ (80016a8 <HAL_GPIO_Init+0x2fc>)
 800152e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001538:	4a5c      	ldr	r2, [pc, #368]	@ (80016ac <HAL_GPIO_Init+0x300>)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	220f      	movs	r2, #15
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001562:	d02b      	beq.n	80015bc <HAL_GPIO_Init+0x210>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a52      	ldr	r2, [pc, #328]	@ (80016b0 <HAL_GPIO_Init+0x304>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d025      	beq.n	80015b8 <HAL_GPIO_Init+0x20c>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a51      	ldr	r2, [pc, #324]	@ (80016b4 <HAL_GPIO_Init+0x308>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d01f      	beq.n	80015b4 <HAL_GPIO_Init+0x208>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a50      	ldr	r2, [pc, #320]	@ (80016b8 <HAL_GPIO_Init+0x30c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d019      	beq.n	80015b0 <HAL_GPIO_Init+0x204>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a4f      	ldr	r2, [pc, #316]	@ (80016bc <HAL_GPIO_Init+0x310>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d013      	beq.n	80015ac <HAL_GPIO_Init+0x200>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a4e      	ldr	r2, [pc, #312]	@ (80016c0 <HAL_GPIO_Init+0x314>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d00d      	beq.n	80015a8 <HAL_GPIO_Init+0x1fc>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a4d      	ldr	r2, [pc, #308]	@ (80016c4 <HAL_GPIO_Init+0x318>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d007      	beq.n	80015a4 <HAL_GPIO_Init+0x1f8>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a4c      	ldr	r2, [pc, #304]	@ (80016c8 <HAL_GPIO_Init+0x31c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d101      	bne.n	80015a0 <HAL_GPIO_Init+0x1f4>
 800159c:	2307      	movs	r3, #7
 800159e:	e00e      	b.n	80015be <HAL_GPIO_Init+0x212>
 80015a0:	2308      	movs	r3, #8
 80015a2:	e00c      	b.n	80015be <HAL_GPIO_Init+0x212>
 80015a4:	2306      	movs	r3, #6
 80015a6:	e00a      	b.n	80015be <HAL_GPIO_Init+0x212>
 80015a8:	2305      	movs	r3, #5
 80015aa:	e008      	b.n	80015be <HAL_GPIO_Init+0x212>
 80015ac:	2304      	movs	r3, #4
 80015ae:	e006      	b.n	80015be <HAL_GPIO_Init+0x212>
 80015b0:	2303      	movs	r3, #3
 80015b2:	e004      	b.n	80015be <HAL_GPIO_Init+0x212>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e002      	b.n	80015be <HAL_GPIO_Init+0x212>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_GPIO_Init+0x212>
 80015bc:	2300      	movs	r3, #0
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	f002 0203 	and.w	r2, r2, #3
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	4093      	lsls	r3, r2
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015ce:	4937      	ldr	r1, [pc, #220]	@ (80016ac <HAL_GPIO_Init+0x300>)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015dc:	4b3b      	ldr	r3, [pc, #236]	@ (80016cc <HAL_GPIO_Init+0x320>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001600:	4a32      	ldr	r2, [pc, #200]	@ (80016cc <HAL_GPIO_Init+0x320>)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001606:	4b31      	ldr	r3, [pc, #196]	@ (80016cc <HAL_GPIO_Init+0x320>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800162a:	4a28      	ldr	r2, [pc, #160]	@ (80016cc <HAL_GPIO_Init+0x320>)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001630:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <HAL_GPIO_Init+0x320>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001654:	4a1d      	ldr	r2, [pc, #116]	@ (80016cc <HAL_GPIO_Init+0x320>)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <HAL_GPIO_Init+0x320>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800167e:	4a13      	ldr	r2, [pc, #76]	@ (80016cc <HAL_GPIO_Init+0x320>)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	f47f ae91 	bne.w	80013bc <HAL_GPIO_Init+0x10>
  }
}
 800169a:	bf00      	nop
 800169c:	bf00      	nop
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010000 	.word	0x40010000
 80016b0:	48000400 	.word	0x48000400
 80016b4:	48000800 	.word	0x48000800
 80016b8:	48000c00 	.word	0x48000c00
 80016bc:	48001000 	.word	0x48001000
 80016c0:	48001400 	.word	0x48001400
 80016c4:	48001800 	.word	0x48001800
 80016c8:	48001c00 	.word	0x48001c00
 80016cc:	40010400 	.word	0x40010400

080016d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e08d      	b.n	80017fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fb0e 	bl	8000d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2224      	movs	r2, #36	@ 0x24
 8001700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001720:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001730:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d107      	bne.n	800174a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	e006      	b.n	8001758 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001756:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d108      	bne.n	8001772 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	e007      	b.n	8001782 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001780:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001794:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69d9      	ldr	r1, [r3, #28]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1a      	ldr	r2, [r3, #32]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2220      	movs	r2, #32
 80017ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b08a      	sub	sp, #40	@ 0x28
 800180a:	af02      	add	r7, sp, #8
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	460b      	mov	r3, r1
 8001814:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b20      	cmp	r3, #32
 8001824:	f040 80d6 	bne.w	80019d4 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001836:	d101      	bne.n	800183c <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001838:	2302      	movs	r3, #2
 800183a:	e0cc      	b.n	80019d6 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_I2C_IsDeviceReady+0x44>
 8001846:	2302      	movs	r3, #2
 8001848:	e0c5      	b.n	80019d6 <HAL_I2C_IsDeviceReady+0x1d0>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2224      	movs	r2, #36	@ 0x24
 8001856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d107      	bne.n	8001878 <HAL_I2C_IsDeviceReady+0x72>
 8001868:	897b      	ldrh	r3, [r7, #10]
 800186a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800186e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001872:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001876:	e006      	b.n	8001886 <HAL_I2C_IsDeviceReady+0x80>
 8001878:	897b      	ldrh	r3, [r7, #10]
 800187a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800187e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001882:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800188c:	f7ff fc78 	bl	8001180 <HAL_GetTick>
 8001890:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0320 	and.w	r3, r3, #32
 800189c:	2b20      	cmp	r3, #32
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b10      	cmp	r3, #16
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018be:	e034      	b.n	800192a <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018c6:	d01a      	beq.n	80018fe <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018c8:	f7ff fc5a 	bl	8001180 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d302      	bcc.n	80018de <HAL_I2C_IsDeviceReady+0xd8>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10f      	bne.n	80018fe <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f043 0220 	orr.w	r2, r3, #32
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e06b      	b.n	80019d6 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0320 	and.w	r3, r3, #32
 8001908:	2b20      	cmp	r3, #32
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b10      	cmp	r3, #16
 8001920:	bf0c      	ite	eq
 8001922:	2301      	moveq	r3, #1
 8001924:	2300      	movne	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800192a:	7ffb      	ldrb	r3, [r7, #31]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <HAL_I2C_IsDeviceReady+0x130>
 8001930:	7fbb      	ldrb	r3, [r7, #30]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0c4      	beq.n	80018c0 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b10      	cmp	r3, #16
 8001942:	d01a      	beq.n	800197a <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	2120      	movs	r1, #32
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f869 	bl	8001a26 <I2C_WaitOnFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e03b      	b.n	80019d6 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2220      	movs	r2, #32
 8001964:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e02d      	b.n	80019d6 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	2120      	movs	r1, #32
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f84e 	bl	8001a26 <I2C_WaitOnFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e020      	b.n	80019d6 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2210      	movs	r2, #16
 800199a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2220      	movs	r2, #32
 80019a2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	f63f af56 	bhi.w	8001860 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2220      	movs	r2, #32
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c0:	f043 0220 	orr.w	r2, r3, #32
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80019d4:	2302      	movs	r3, #2
  }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d103      	bne.n	80019fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2200      	movs	r2, #0
 80019fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d007      	beq.n	8001a1a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699a      	ldr	r2, [r3, #24]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0201 	orr.w	r2, r2, #1
 8001a18:	619a      	str	r2, [r3, #24]
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	4613      	mov	r3, r2
 8001a34:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a36:	e03b      	b.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	6839      	ldr	r1, [r7, #0]
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 f84b 	bl	8001ad8 <I2C_IsErrorOccurred>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e041      	b.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a52:	d02d      	beq.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a54:	f7ff fb94 	bl	8001180 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d302      	bcc.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d122      	bne.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4013      	ands	r3, r2
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	bf0c      	ite	eq
 8001a7a:	2301      	moveq	r3, #1
 8001a7c:	2300      	movne	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d113      	bne.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8c:	f043 0220 	orr.w	r2, r3, #32
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e00f      	b.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d0b4      	beq.n	8001a38 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d068      	beq.n	8001bd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2210      	movs	r2, #16
 8001b0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b0c:	e049      	b.n	8001ba2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b14:	d045      	beq.n	8001ba2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b16:	f7ff fb33 	bl	8001180 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d302      	bcc.n	8001b2c <I2C_IsErrorOccurred+0x54>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d13a      	bne.n	8001ba2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b4e:	d121      	bne.n	8001b94 <I2C_IsErrorOccurred+0xbc>
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b56:	d01d      	beq.n	8001b94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b58:	7cfb      	ldrb	r3, [r7, #19]
 8001b5a:	2b20      	cmp	r3, #32
 8001b5c:	d01a      	beq.n	8001b94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b6e:	f7ff fb07 	bl	8001180 <HAL_GetTick>
 8001b72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b74:	e00e      	b.n	8001b94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b76:	f7ff fb03 	bl	8001180 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b19      	cmp	r3, #25
 8001b82:	d907      	bls.n	8001b94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	f043 0320 	orr.w	r3, r3, #32
 8001b8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001b92:	e006      	b.n	8001ba2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d1e9      	bne.n	8001b76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d003      	beq.n	8001bb8 <I2C_IsErrorOccurred+0xe0>
 8001bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0aa      	beq.n	8001b0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d103      	bne.n	8001bc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00b      	beq.n	8001c00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00b      	beq.n	8001c44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	f043 0302 	orr.w	r3, r3, #2
 8001c32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01c      	beq.n	8001c86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff fec6 	bl	80019de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <I2C_IsErrorOccurred+0x1bc>)
 8001c5e:	400b      	ands	r3, r1
 8001c60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3728      	adds	r7, #40	@ 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	fe00e800 	.word	0xfe00e800

08001c98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d138      	bne.n	8001d20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e032      	b.n	8001d22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2224      	movs	r2, #36	@ 0x24
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001cea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6819      	ldr	r1, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e000      	b.n	8001d22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d20:	2302      	movs	r3, #2
  }
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d139      	bne.n	8001db8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e033      	b.n	8001dba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2224      	movs	r2, #36	@ 0x24
 8001d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e000      	b.n	8001dba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
  }
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dd8:	d102      	bne.n	8001de0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001dda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dde:	e00b      	b.n	8001df8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dee:	d102      	bne.n	8001df6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001df0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001df4:	e000      	b.n	8001df8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001df6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40007000 	.word	0x40007000

08001e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d141      	bne.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e16:	4b4b      	ldr	r3, [pc, #300]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e22:	d131      	bne.n	8001e88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e24:	4b47      	ldr	r3, [pc, #284]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e2a:	4a46      	ldr	r2, [pc, #280]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e34:	4b43      	ldr	r3, [pc, #268]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e3c:	4a41      	ldr	r2, [pc, #260]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001e44:	4b40      	ldr	r3, [pc, #256]	@ (8001f48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2232      	movs	r2, #50	@ 0x32
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	3301      	adds	r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e5a:	e002      	b.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e62:	4b38      	ldr	r3, [pc, #224]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e6e:	d102      	bne.n	8001e76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f2      	bne.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e76:	4b33      	ldr	r3, [pc, #204]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e82:	d158      	bne.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e057      	b.n	8001f38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e88:	4b2e      	ldr	r3, [pc, #184]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e98:	e04d      	b.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ea0:	d141      	bne.n	8001f26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ea2:	4b28      	ldr	r3, [pc, #160]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eae:	d131      	bne.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eb0:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eb6:	4a23      	ldr	r2, [pc, #140]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec0:	4b20      	ldr	r3, [pc, #128]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ece:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2232      	movs	r2, #50	@ 0x32
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	4a1c      	ldr	r2, [pc, #112]	@ (8001f4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	0c9b      	lsrs	r3, r3, #18
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee6:	e002      	b.n	8001eee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efa:	d102      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f2      	bne.n	8001ee8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f02:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0e:	d112      	bne.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e011      	b.n	8001f38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f24:	e007      	b.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f26:	4b07      	ldr	r3, [pc, #28]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f2e:	4a05      	ldr	r2, [pc, #20]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f34:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40007000 	.word	0x40007000
 8001f48:	20040000 	.word	0x20040000
 8001f4c:	431bde83 	.word	0x431bde83

08001f50 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001f5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f5e:	6053      	str	r3, [r2, #4]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40007000 	.word	0x40007000

08001f70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f000 bc08 	b.w	8002794 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f84:	4b96      	ldr	r3, [pc, #600]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f8e:	4b94      	ldr	r3, [pc, #592]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80e4 	beq.w	800216e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d007      	beq.n	8001fbc <HAL_RCC_OscConfig+0x4c>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b0c      	cmp	r3, #12
 8001fb0:	f040 808b 	bne.w	80020ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	f040 8087 	bne.w	80020ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fbc:	4b88      	ldr	r3, [pc, #544]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x64>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e3df      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1a      	ldr	r2, [r3, #32]
 8001fd8:	4b81      	ldr	r3, [pc, #516]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <HAL_RCC_OscConfig+0x7e>
 8001fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fec:	e005      	b.n	8001ffa <HAL_RCC_OscConfig+0x8a>
 8001fee:	4b7c      	ldr	r3, [pc, #496]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d223      	bcs.n	8002046 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fdcc 	bl	8002ba0 <RCC_SetFlashLatencyFromMSIRange>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e3c0      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002012:	4b73      	ldr	r3, [pc, #460]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a72      	ldr	r2, [pc, #456]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b70      	ldr	r3, [pc, #448]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	496d      	ldr	r1, [pc, #436]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002030:	4b6b      	ldr	r3, [pc, #428]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	4968      	ldr	r1, [pc, #416]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
 8002044:	e025      	b.n	8002092 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002046:	4b66      	ldr	r3, [pc, #408]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a65      	ldr	r2, [pc, #404]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 800204c:	f043 0308 	orr.w	r3, r3, #8
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b63      	ldr	r3, [pc, #396]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4960      	ldr	r1, [pc, #384]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002064:	4b5e      	ldr	r3, [pc, #376]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	495b      	ldr	r1, [pc, #364]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fd8c 	bl	8002ba0 <RCC_SetFlashLatencyFromMSIRange>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e380      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002092:	f000 fcc1 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b51      	ldr	r3, [pc, #324]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	4950      	ldr	r1, [pc, #320]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	fa22 f303 	lsr.w	r3, r2, r3
 80020ae:	4a4e      	ldr	r2, [pc, #312]	@ (80021e8 <HAL_RCC_OscConfig+0x278>)
 80020b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020b2:	4b4e      	ldr	r3, [pc, #312]	@ (80021ec <HAL_RCC_OscConfig+0x27c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f812 	bl	80010e0 <HAL_InitTick>
 80020bc:	4603      	mov	r3, r0
 80020be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d052      	beq.n	800216c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	e364      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d032      	beq.n	8002138 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020d2:	4b43      	ldr	r3, [pc, #268]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a42      	ldr	r2, [pc, #264]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020de:	f7ff f84f 	bl	8001180 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e6:	f7ff f84b 	bl	8001180 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e34d      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020f8:	4b39      	ldr	r3, [pc, #228]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002104:	4b36      	ldr	r3, [pc, #216]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a35      	ldr	r2, [pc, #212]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b33      	ldr	r3, [pc, #204]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4930      	ldr	r1, [pc, #192]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002122:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	492b      	ldr	r1, [pc, #172]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
 8002136:	e01a      	b.n	800216e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002138:	4b29      	ldr	r3, [pc, #164]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a28      	ldr	r2, [pc, #160]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 800213e:	f023 0301 	bic.w	r3, r3, #1
 8002142:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002144:	f7ff f81c 	bl	8001180 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800214c:	f7ff f818 	bl	8001180 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e31a      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800215e:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x1dc>
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800216c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d073      	beq.n	8002262 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	2b08      	cmp	r3, #8
 800217e:	d005      	beq.n	800218c <HAL_RCC_OscConfig+0x21c>
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d10e      	bne.n	80021a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d10b      	bne.n	80021a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d063      	beq.n	8002260 <HAL_RCC_OscConfig+0x2f0>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d15f      	bne.n	8002260 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e2f7      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ac:	d106      	bne.n	80021bc <HAL_RCC_OscConfig+0x24c>
 80021ae:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a0b      	ldr	r2, [pc, #44]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e025      	b.n	8002208 <HAL_RCC_OscConfig+0x298>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021c4:	d114      	bne.n	80021f0 <HAL_RCC_OscConfig+0x280>
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 80021cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b03      	ldr	r3, [pc, #12]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a02      	ldr	r2, [pc, #8]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e013      	b.n	8002208 <HAL_RCC_OscConfig+0x298>
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08005524 	.word	0x08005524
 80021e8:	20040000 	.word	0x20040000
 80021ec:	20040004 	.word	0x20040004
 80021f0:	4ba0      	ldr	r3, [pc, #640]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a9f      	ldr	r2, [pc, #636]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b9d      	ldr	r3, [pc, #628]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a9c      	ldr	r2, [pc, #624]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe ffb6 	bl	8001180 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7fe ffb2 	bl	8001180 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	@ 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e2b4      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800222a:	4b92      	ldr	r3, [pc, #584]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x2a8>
 8002236:	e014      	b.n	8002262 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe ffa2 	bl	8001180 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7fe ff9e 	bl	8001180 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	@ 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e2a0      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002252:	4b88      	ldr	r3, [pc, #544]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x2d0>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d060      	beq.n	8002330 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d005      	beq.n	8002280 <HAL_RCC_OscConfig+0x310>
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d119      	bne.n	80022ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d116      	bne.n	80022ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002280:	4b7c      	ldr	r3, [pc, #496]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_OscConfig+0x328>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e27d      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b76      	ldr	r3, [pc, #472]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	4973      	ldr	r1, [pc, #460]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ac:	e040      	b.n	8002330 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d023      	beq.n	80022fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7fe ff5d 	bl	8001180 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ca:	f7fe ff59 	bl	8001180 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e25b      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022dc:	4b65      	ldr	r3, [pc, #404]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e8:	4b62      	ldr	r3, [pc, #392]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	495f      	ldr	r1, [pc, #380]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
 80022fc:	e018      	b.n	8002330 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a5c      	ldr	r2, [pc, #368]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fe ff39 	bl	8001180 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002312:	f7fe ff35 	bl	8001180 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e237      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002324:	4b53      	ldr	r3, [pc, #332]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d03c      	beq.n	80023b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01c      	beq.n	800237e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002344:	4b4b      	ldr	r3, [pc, #300]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800234a:	4a4a      	ldr	r2, [pc, #296]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7fe ff14 	bl	8001180 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235c:	f7fe ff10 	bl	8001180 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e212      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800236e:	4b41      	ldr	r3, [pc, #260]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ef      	beq.n	800235c <HAL_RCC_OscConfig+0x3ec>
 800237c:	e01b      	b.n	80023b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237e:	4b3d      	ldr	r3, [pc, #244]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002380:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002384:	4a3b      	ldr	r2, [pc, #236]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7fe fef7 	bl	8001180 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002396:	f7fe fef3 	bl	8001180 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1f5      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a8:	4b32      	ldr	r3, [pc, #200]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1ef      	bne.n	8002396 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80a6 	beq.w	8002510 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10d      	bne.n	80023f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b27      	ldr	r3, [pc, #156]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d8:	4a26      	ldr	r2, [pc, #152]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023de:	6593      	str	r3, [r2, #88]	@ 0x58
 80023e0:	4b24      	ldr	r3, [pc, #144]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f0:	4b21      	ldr	r3, [pc, #132]	@ (8002478 <HAL_RCC_OscConfig+0x508>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d118      	bne.n	800242e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <HAL_RCC_OscConfig+0x508>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1d      	ldr	r2, [pc, #116]	@ (8002478 <HAL_RCC_OscConfig+0x508>)
 8002402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002406:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002408:	f7fe feba 	bl	8001180 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002410:	f7fe feb6 	bl	8001180 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1b8      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002422:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <HAL_RCC_OscConfig+0x508>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_RCC_OscConfig+0x4d8>
 8002436:	4b0f      	ldr	r3, [pc, #60]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243c:	4a0d      	ldr	r2, [pc, #52]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002446:	e029      	b.n	800249c <HAL_RCC_OscConfig+0x52c>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b05      	cmp	r3, #5
 800244e:	d115      	bne.n	800247c <HAL_RCC_OscConfig+0x50c>
 8002450:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002456:	4a07      	ldr	r2, [pc, #28]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002460:	4b04      	ldr	r3, [pc, #16]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002466:	4a03      	ldr	r2, [pc, #12]	@ (8002474 <HAL_RCC_OscConfig+0x504>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x52c>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
 800247c:	4b9d      	ldr	r3, [pc, #628]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002482:	4a9c      	ldr	r2, [pc, #624]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800248c:	4b99      	ldr	r3, [pc, #612]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002492:	4a98      	ldr	r2, [pc, #608]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d016      	beq.n	80024d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe fe6c 	bl	8001180 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe fe68 	bl	8001180 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e168      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c2:	4b8c      	ldr	r3, [pc, #560]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ed      	beq.n	80024ac <HAL_RCC_OscConfig+0x53c>
 80024d0:	e015      	b.n	80024fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe fe55 	bl	8001180 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fe51 	bl	8001180 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e151      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f0:	4b80      	ldr	r3, [pc, #512]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ed      	bne.n	80024da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024fe:	7ffb      	ldrb	r3, [r7, #31]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002504:	4b7b      	ldr	r3, [pc, #492]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	4a7a      	ldr	r2, [pc, #488]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 800250a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800250e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d03c      	beq.n	8002596 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01c      	beq.n	800255e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002524:	4b73      	ldr	r3, [pc, #460]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 8002526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800252a:	4a72      	ldr	r2, [pc, #456]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe fe24 	bl	8001180 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800253c:	f7fe fe20 	bl	8001180 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e122      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800254e:	4b69      	ldr	r3, [pc, #420]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 8002550:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ef      	beq.n	800253c <HAL_RCC_OscConfig+0x5cc>
 800255c:	e01b      	b.n	8002596 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800255e:	4b65      	ldr	r3, [pc, #404]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 8002560:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002564:	4a63      	ldr	r2, [pc, #396]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7fe fe07 	bl	8001180 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002576:	f7fe fe03 	bl	8001180 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e105      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002588:	4b5a      	ldr	r3, [pc, #360]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 800258a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ef      	bne.n	8002576 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80f9 	beq.w	8002792 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	f040 80cf 	bne.w	8002748 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025aa:	4b52      	ldr	r3, [pc, #328]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0203 	and.w	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d12c      	bne.n	8002618 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	3b01      	subs	r3, #1
 80025ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d123      	bne.n	8002618 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025dc:	429a      	cmp	r2, r3
 80025de:	d11b      	bne.n	8002618 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d113      	bne.n	8002618 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	3b01      	subs	r3, #1
 80025fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d109      	bne.n	8002618 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	3b01      	subs	r3, #1
 8002612:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d071      	beq.n	80026fc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d068      	beq.n	80026f0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800261e:	4b35      	ldr	r3, [pc, #212]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800262a:	4b32      	ldr	r3, [pc, #200]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0ac      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800263a:	4b2e      	ldr	r3, [pc, #184]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a2d      	ldr	r2, [pc, #180]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 8002640:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002644:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002646:	f7fe fd9b 	bl	8001180 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe fd97 	bl	8001180 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e099      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002660:	4b24      	ldr	r3, [pc, #144]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266c:	4b21      	ldr	r3, [pc, #132]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	4b21      	ldr	r3, [pc, #132]	@ (80026f8 <HAL_RCC_OscConfig+0x788>)
 8002672:	4013      	ands	r3, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800267c:	3a01      	subs	r2, #1
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	4311      	orrs	r1, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002686:	0212      	lsls	r2, r2, #8
 8002688:	4311      	orrs	r1, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800268e:	0852      	lsrs	r2, r2, #1
 8002690:	3a01      	subs	r2, #1
 8002692:	0552      	lsls	r2, r2, #21
 8002694:	4311      	orrs	r1, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800269a:	0852      	lsrs	r2, r2, #1
 800269c:	3a01      	subs	r2, #1
 800269e:	0652      	lsls	r2, r2, #25
 80026a0:	4311      	orrs	r1, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026a6:	06d2      	lsls	r2, r2, #27
 80026a8:	430a      	orrs	r2, r1
 80026aa:	4912      	ldr	r1, [pc, #72]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026b0:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0f      	ldr	r2, [pc, #60]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 80026b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026bc:	4b0d      	ldr	r3, [pc, #52]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a0c      	ldr	r2, [pc, #48]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 80026c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026c8:	f7fe fd5a 	bl	8001180 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d0:	f7fe fd56 	bl	8001180 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e058      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e2:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <HAL_RCC_OscConfig+0x784>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ee:	e050      	b.n	8002792 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e04f      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
 80026f4:	40021000 	.word	0x40021000
 80026f8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fc:	4b27      	ldr	r3, [pc, #156]	@ (800279c <HAL_RCC_OscConfig+0x82c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d144      	bne.n	8002792 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002708:	4b24      	ldr	r3, [pc, #144]	@ (800279c <HAL_RCC_OscConfig+0x82c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a23      	ldr	r2, [pc, #140]	@ (800279c <HAL_RCC_OscConfig+0x82c>)
 800270e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002712:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002714:	4b21      	ldr	r3, [pc, #132]	@ (800279c <HAL_RCC_OscConfig+0x82c>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a20      	ldr	r2, [pc, #128]	@ (800279c <HAL_RCC_OscConfig+0x82c>)
 800271a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002720:	f7fe fd2e 	bl	8001180 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fd2a 	bl	8001180 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e02c      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273a:	4b18      	ldr	r3, [pc, #96]	@ (800279c <HAL_RCC_OscConfig+0x82c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x7b8>
 8002746:	e024      	b.n	8002792 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b0c      	cmp	r3, #12
 800274c:	d01f      	beq.n	800278e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b13      	ldr	r3, [pc, #76]	@ (800279c <HAL_RCC_OscConfig+0x82c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a12      	ldr	r2, [pc, #72]	@ (800279c <HAL_RCC_OscConfig+0x82c>)
 8002754:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7fe fd11 	bl	8001180 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002762:	f7fe fd0d 	bl	8001180 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e00f      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002774:	4b09      	ldr	r3, [pc, #36]	@ (800279c <HAL_RCC_OscConfig+0x82c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_RCC_OscConfig+0x82c>)
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	4905      	ldr	r1, [pc, #20]	@ (800279c <HAL_RCC_OscConfig+0x82c>)
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_RCC_OscConfig+0x830>)
 8002788:	4013      	ands	r3, r2
 800278a:	60cb      	str	r3, [r1, #12]
 800278c:	e001      	b.n	8002792 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	feeefffc 	.word	0xfeeefffc

080027a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e11d      	b.n	80029f8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b90      	ldr	r3, [pc, #576]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d910      	bls.n	80027ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 020f 	bic.w	r2, r3, #15
 80027d2:	498b      	ldr	r1, [pc, #556]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b89      	ldr	r3, [pc, #548]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e105      	b.n	80029f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d010      	beq.n	800281a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	4b81      	ldr	r3, [pc, #516]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002804:	429a      	cmp	r2, r3
 8002806:	d908      	bls.n	800281a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b7e      	ldr	r3, [pc, #504]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	497b      	ldr	r1, [pc, #492]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d079      	beq.n	800291a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d11e      	bne.n	800286c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282e:	4b75      	ldr	r3, [pc, #468]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0dc      	b.n	80029f8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800283e:	f000 fa09 	bl	8002c54 <RCC_GetSysClockFreqFromPLLSource>
 8002842:	4603      	mov	r3, r0
 8002844:	4a70      	ldr	r2, [pc, #448]	@ (8002a08 <HAL_RCC_ClockConfig+0x264>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d946      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800284a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d140      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002856:	4b6b      	ldr	r3, [pc, #428]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800285e:	4a69      	ldr	r2, [pc, #420]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002864:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002866:	2380      	movs	r3, #128	@ 0x80
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e035      	b.n	80028d8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d107      	bne.n	8002884 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002874:	4b63      	ldr	r3, [pc, #396]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d115      	bne.n	80028ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0b9      	b.n	80029f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d107      	bne.n	800289c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800288c:	4b5d      	ldr	r3, [pc, #372]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0ad      	b.n	80029f8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800289c:	4b59      	ldr	r3, [pc, #356]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0a5      	b.n	80029f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80028ac:	f000 f8b4 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4a55      	ldr	r2, [pc, #340]	@ (8002a08 <HAL_RCC_ClockConfig+0x264>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d90f      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028b8:	4b52      	ldr	r3, [pc, #328]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80028ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028d4:	2380      	movs	r3, #128	@ 0x80
 80028d6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 0203 	bic.w	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4947      	ldr	r1, [pc, #284]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ea:	f7fe fc49 	bl	8001180 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f2:	f7fe fc45 	bl	8001180 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e077      	b.n	80029f8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002908:	4b3e      	ldr	r3, [pc, #248]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 020c 	and.w	r2, r3, #12
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	429a      	cmp	r2, r3
 8002918:	d1eb      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b80      	cmp	r3, #128	@ 0x80
 800291e:	d105      	bne.n	800292c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002920:	4b38      	ldr	r3, [pc, #224]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a37      	ldr	r2, [pc, #220]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002926:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800292a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d010      	beq.n	800295a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002944:	429a      	cmp	r2, r3
 8002946:	d208      	bcs.n	800295a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002948:	4b2e      	ldr	r3, [pc, #184]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	492b      	ldr	r1, [pc, #172]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800295a:	4b29      	ldr	r3, [pc, #164]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d210      	bcs.n	800298a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002968:	4b25      	ldr	r3, [pc, #148]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 020f 	bic.w	r2, r3, #15
 8002970:	4923      	ldr	r1, [pc, #140]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002978:	4b21      	ldr	r3, [pc, #132]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d001      	beq.n	800298a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e036      	b.n	80029f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002996:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	4918      	ldr	r1, [pc, #96]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b4:	4b13      	ldr	r3, [pc, #76]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4910      	ldr	r1, [pc, #64]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029c8:	f000 f826 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	490c      	ldr	r1, [pc, #48]	@ (8002a0c <HAL_RCC_ClockConfig+0x268>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <HAL_RCC_ClockConfig+0x26c>)
 80029e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_RCC_ClockConfig+0x270>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe fb77 	bl	80010e0 <HAL_InitTick>
 80029f2:	4603      	mov	r3, r0
 80029f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	04c4b400 	.word	0x04c4b400
 8002a0c:	08005524 	.word	0x08005524
 8002a10:	20040000 	.word	0x20040000
 8002a14:	20040004 	.word	0x20040004

08002a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	@ 0x24
 8002a1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a26:	4b3e      	ldr	r3, [pc, #248]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a30:	4b3b      	ldr	r3, [pc, #236]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x34>
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b0c      	cmp	r3, #12
 8002a44:	d121      	bne.n	8002a8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d11e      	bne.n	8002a8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a4c:	4b34      	ldr	r3, [pc, #208]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a58:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	e005      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a68:	4b2d      	ldr	r3, [pc, #180]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a74:	4a2b      	ldr	r2, [pc, #172]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10d      	bne.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d102      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a90:	4b25      	ldr	r3, [pc, #148]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a92:	61bb      	str	r3, [r7, #24]
 8002a94:	e004      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a9c:	4b23      	ldr	r3, [pc, #140]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x114>)
 8002a9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d134      	bne.n	8002b10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d003      	beq.n	8002abe <HAL_RCC_GetSysClockFreq+0xa6>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d003      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xac>
 8002abc:	e005      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002abe:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ac0:	617b      	str	r3, [r7, #20]
      break;
 8002ac2:	e005      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ac4:	4b19      	ldr	r3, [pc, #100]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ac6:	617b      	str	r3, [r7, #20]
      break;
 8002ac8:	e002      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	617b      	str	r3, [r7, #20]
      break;
 8002ace:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ad0:	4b13      	ldr	r3, [pc, #76]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	3301      	adds	r3, #1
 8002adc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ade:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	fb03 f202 	mul.w	r2, r3, r2
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002af6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	0e5b      	lsrs	r3, r3, #25
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	3301      	adds	r3, #1
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b10:	69bb      	ldr	r3, [r7, #24]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3724      	adds	r7, #36	@ 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	0800553c 	.word	0x0800553c
 8002b28:	00f42400 	.word	0x00f42400
 8002b2c:	007a1200 	.word	0x007a1200

08002b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20040000 	.word	0x20040000

08002b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b4c:	f7ff fff0 	bl	8002b30 <HAL_RCC_GetHCLKFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	4904      	ldr	r1, [pc, #16]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08005534 	.word	0x08005534

08002b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b78:	f7ff ffda 	bl	8002b30 <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	0adb      	lsrs	r3, r3, #11
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4904      	ldr	r1, [pc, #16]	@ (8002b9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08005534 	.word	0x08005534

08002ba0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bac:	4b27      	ldr	r3, [pc, #156]	@ (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bb8:	f7ff f906 	bl	8001dc8 <HAL_PWREx_GetVoltageRange>
 8002bbc:	6178      	str	r0, [r7, #20]
 8002bbe:	e014      	b.n	8002bea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bc0:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	4a21      	ldr	r2, [pc, #132]	@ (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bd8:	f7ff f8f6 	bl	8001dc8 <HAL_PWREx_GetVoltageRange>
 8002bdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bde:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bf0:	d10b      	bne.n	8002c0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b80      	cmp	r3, #128	@ 0x80
 8002bf6:	d913      	bls.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2ba0      	cmp	r3, #160	@ 0xa0
 8002bfc:	d902      	bls.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bfe:	2302      	movs	r3, #2
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	e00d      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c04:	2301      	movs	r3, #1
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	e00a      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c0e:	d902      	bls.n	8002c16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c10:	2302      	movs	r3, #2
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	e004      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b70      	cmp	r3, #112	@ 0x70
 8002c1a:	d101      	bne.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 020f 	bic.w	r2, r3, #15
 8002c28:	4909      	ldr	r1, [pc, #36]	@ (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c30:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40022000 	.word	0x40022000

08002c54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d10 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d00b      	beq.n	8002c82 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d825      	bhi.n	8002cbc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d008      	beq.n	8002c88 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d11f      	bne.n	8002cbc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002c7c:	4b25      	ldr	r3, [pc, #148]	@ (8002d14 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c7e:	613b      	str	r3, [r7, #16]
    break;
 8002c80:	e01f      	b.n	8002cc2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002c82:	4b25      	ldr	r3, [pc, #148]	@ (8002d18 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002c84:	613b      	str	r3, [r7, #16]
    break;
 8002c86:	e01c      	b.n	8002cc2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c88:	4b21      	ldr	r3, [pc, #132]	@ (8002d10 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d107      	bne.n	8002ca4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c94:	4b1e      	ldr	r3, [pc, #120]	@ (8002d10 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e005      	b.n	8002cb0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d10 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d1c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb8:	613b      	str	r3, [r7, #16]
    break;
 8002cba:	e002      	b.n	8002cc2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
    break;
 8002cc0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cc2:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	3301      	adds	r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d10 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	fb03 f202 	mul.w	r2, r3, r2
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ce8:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0e5b      	lsrs	r3, r3, #25
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d02:	683b      	ldr	r3, [r7, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	371c      	adds	r7, #28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	40021000 	.word	0x40021000
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	007a1200 	.word	0x007a1200
 8002d1c:	0800553c 	.word	0x0800553c

08002d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d28:	2300      	movs	r3, #0
 8002d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d040      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d40:	2b80      	cmp	r3, #128	@ 0x80
 8002d42:	d02a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d44:	2b80      	cmp	r3, #128	@ 0x80
 8002d46:	d825      	bhi.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d48:	2b60      	cmp	r3, #96	@ 0x60
 8002d4a:	d026      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d4c:	2b60      	cmp	r3, #96	@ 0x60
 8002d4e:	d821      	bhi.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d50:	2b40      	cmp	r3, #64	@ 0x40
 8002d52:	d006      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002d54:	2b40      	cmp	r3, #64	@ 0x40
 8002d56:	d81d      	bhi.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d010      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002d60:	e018      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d62:	4b89      	ldr	r3, [pc, #548]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	4a88      	ldr	r2, [pc, #544]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d6e:	e015      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fb02 	bl	8003380 <RCCEx_PLLSAI1_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d80:	e00c      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3320      	adds	r3, #32
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fbed 	bl	8003568 <RCCEx_PLLSAI2_Config>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d92:	e003      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	74fb      	strb	r3, [r7, #19]
      break;
 8002d98:	e000      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d9c:	7cfb      	ldrb	r3, [r7, #19]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10b      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002da2:	4b79      	ldr	r3, [pc, #484]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002da8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002db0:	4975      	ldr	r1, [pc, #468]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002db8:	e001      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dba:	7cfb      	ldrb	r3, [r7, #19]
 8002dbc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d047      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd2:	d030      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd8:	d82a      	bhi.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002dda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dde:	d02a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002de0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002de4:	d824      	bhi.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002de6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dea:	d008      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002df0:	d81e      	bhi.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dfa:	d010      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002dfc:	e018      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dfe:	4b62      	ldr	r3, [pc, #392]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	4a61      	ldr	r2, [pc, #388]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e08:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e0a:	e015      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fab4 	bl	8003380 <RCCEx_PLLSAI1_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e1c:	e00c      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3320      	adds	r3, #32
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fb9f 	bl	8003568 <RCCEx_PLLSAI2_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e2e:	e003      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	74fb      	strb	r3, [r7, #19]
      break;
 8002e34:	e000      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10b      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e3e:	4b52      	ldr	r3, [pc, #328]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4c:	494e      	ldr	r1, [pc, #312]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002e54:	e001      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 809f 	beq.w	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e6c:	4b46      	ldr	r3, [pc, #280]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	4b41      	ldr	r3, [pc, #260]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	4a40      	ldr	r2, [pc, #256]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a3a      	ldr	r2, [pc, #232]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eaa:	f7fe f969 	bl	8001180 <HAL_GetTick>
 8002eae:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eb0:	e009      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb2:	f7fe f965 	bl	8001180 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d902      	bls.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ec4:	e005      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ec6:	4b31      	ldr	r3, [pc, #196]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0ef      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d15b      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ee2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01f      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d019      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ef6:	4b24      	ldr	r3, [pc, #144]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f02:	4b21      	ldr	r3, [pc, #132]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f08:	4a1f      	ldr	r2, [pc, #124]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f12:	4b1d      	ldr	r3, [pc, #116]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f18:	4a1b      	ldr	r2, [pc, #108]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f22:	4a19      	ldr	r2, [pc, #100]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d016      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe f924 	bl	8001180 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f920 	bl	8001180 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d902      	bls.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	74fb      	strb	r3, [r7, #19]
            break;
 8002f52:	e006      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f54:	4b0c      	ldr	r3, [pc, #48]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0ec      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10c      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f68:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f78:	4903      	ldr	r1, [pc, #12]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f80:	e008      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f82:	7cfb      	ldrb	r3, [r7, #19]
 8002f84:	74bb      	strb	r3, [r7, #18]
 8002f86:	e005      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f94:	7c7b      	ldrb	r3, [r7, #17]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d105      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9a:	4ba0      	ldr	r3, [pc, #640]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9e:	4a9f      	ldr	r2, [pc, #636]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fb2:	4b9a      	ldr	r3, [pc, #616]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb8:	f023 0203 	bic.w	r2, r3, #3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc0:	4996      	ldr	r1, [pc, #600]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fd4:	4b91      	ldr	r3, [pc, #580]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fda:	f023 020c 	bic.w	r2, r3, #12
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	498e      	ldr	r1, [pc, #568]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ff6:	4b89      	ldr	r3, [pc, #548]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003004:	4985      	ldr	r1, [pc, #532]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003018:	4b80      	ldr	r3, [pc, #512]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003026:	497d      	ldr	r1, [pc, #500]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800303a:	4b78      	ldr	r3, [pc, #480]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003040:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003048:	4974      	ldr	r1, [pc, #464]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800305c:	4b6f      	ldr	r3, [pc, #444]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003062:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800306a:	496c      	ldr	r1, [pc, #432]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800307e:	4b67      	ldr	r3, [pc, #412]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003084:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800308c:	4963      	ldr	r1, [pc, #396]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030a0:	4b5e      	ldr	r3, [pc, #376]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ae:	495b      	ldr	r1, [pc, #364]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030c2:	4b56      	ldr	r3, [pc, #344]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d0:	4952      	ldr	r1, [pc, #328]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030e4:	4b4d      	ldr	r3, [pc, #308]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	494a      	ldr	r1, [pc, #296]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003106:	4b45      	ldr	r3, [pc, #276]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003114:	4941      	ldr	r1, [pc, #260]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003128:	4b3c      	ldr	r3, [pc, #240]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800312a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800312e:	f023 0203 	bic.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003136:	4939      	ldr	r1, [pc, #228]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d028      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800314a:	4b34      	ldr	r3, [pc, #208]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003150:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003158:	4930      	ldr	r1, [pc, #192]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003164:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003168:	d106      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800316a:	4b2c      	ldr	r3, [pc, #176]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	4a2b      	ldr	r2, [pc, #172]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003170:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003174:	60d3      	str	r3, [r2, #12]
 8003176:	e011      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800317c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003180:	d10c      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	2101      	movs	r1, #1
 8003188:	4618      	mov	r0, r3
 800318a:	f000 f8f9 	bl	8003380 <RCCEx_PLLSAI1_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003192:	7cfb      	ldrb	r3, [r7, #19]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d04d      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031b0:	d108      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80031b2:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031b8:	4a18      	ldr	r2, [pc, #96]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031be:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80031c2:	e012      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80031c4:	4b15      	ldr	r3, [pc, #84]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031ca:	4a14      	ldr	r2, [pc, #80]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031d0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031e2:	490e      	ldr	r1, [pc, #56]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031f2:	d106      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f4:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	4a08      	ldr	r2, [pc, #32]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031fe:	60d3      	str	r3, [r2, #12]
 8003200:	e020      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003206:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800320a:	d109      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800320c:	4b03      	ldr	r3, [pc, #12]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a02      	ldr	r2, [pc, #8]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003216:	60d3      	str	r3, [r2, #12]
 8003218:	e014      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003224:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003228:	d10c      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3304      	adds	r3, #4
 800322e:	2101      	movs	r1, #1
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f8a5 	bl	8003380 <RCCEx_PLLSAI1_Config>
 8003236:	4603      	mov	r3, r0
 8003238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800323a:	7cfb      	ldrb	r3, [r7, #19]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d028      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003250:	4b4a      	ldr	r3, [pc, #296]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003256:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800325e:	4947      	ldr	r1, [pc, #284]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800326a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800326e:	d106      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003270:	4b42      	ldr	r3, [pc, #264]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4a41      	ldr	r2, [pc, #260]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800327a:	60d3      	str	r3, [r2, #12]
 800327c:	e011      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003282:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003286:	d10c      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3304      	adds	r3, #4
 800328c:	2101      	movs	r1, #1
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f876 	bl	8003380 <RCCEx_PLLSAI1_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01e      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ae:	4b33      	ldr	r3, [pc, #204]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032be:	492f      	ldr	r1, [pc, #188]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032d0:	d10c      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2102      	movs	r1, #2
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 f851 	bl	8003380 <RCCEx_PLLSAI1_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00b      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032f8:	4b20      	ldr	r3, [pc, #128]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032fe:	f023 0204 	bic.w	r2, r3, #4
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003308:	491c      	ldr	r1, [pc, #112]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800331c:	4b17      	ldr	r3, [pc, #92]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800331e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003322:	f023 0218 	bic.w	r2, r3, #24
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332c:	4913      	ldr	r1, [pc, #76]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d017      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003340:	4b0e      	ldr	r3, [pc, #56]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003342:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003346:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003350:	490a      	ldr	r1, [pc, #40]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800335e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003362:	d105      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a04      	ldr	r2, [pc, #16]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800336e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003370:	7cbb      	ldrb	r3, [r7, #18]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000

08003380 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800338e:	4b72      	ldr	r3, [pc, #456]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00e      	beq.n	80033b8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800339a:	4b6f      	ldr	r3, [pc, #444]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0203 	and.w	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d103      	bne.n	80033b2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
       ||
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d142      	bne.n	8003438 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
 80033b6:	e03f      	b.n	8003438 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d018      	beq.n	80033f2 <RCCEx_PLLSAI1_Config+0x72>
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d825      	bhi.n	8003410 <RCCEx_PLLSAI1_Config+0x90>
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d002      	beq.n	80033ce <RCCEx_PLLSAI1_Config+0x4e>
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d009      	beq.n	80033e0 <RCCEx_PLLSAI1_Config+0x60>
 80033cc:	e020      	b.n	8003410 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033ce:	4b62      	ldr	r3, [pc, #392]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11d      	bne.n	8003416 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033de:	e01a      	b.n	8003416 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033e0:	4b5d      	ldr	r3, [pc, #372]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d116      	bne.n	800341a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f0:	e013      	b.n	800341a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033f2:	4b59      	ldr	r3, [pc, #356]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10f      	bne.n	800341e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033fe:	4b56      	ldr	r3, [pc, #344]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800340e:	e006      	b.n	800341e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
      break;
 8003414:	e004      	b.n	8003420 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003416:	bf00      	nop
 8003418:	e002      	b.n	8003420 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800341e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d108      	bne.n	8003438 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003426:	4b4c      	ldr	r3, [pc, #304]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f023 0203 	bic.w	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4949      	ldr	r1, [pc, #292]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003434:	4313      	orrs	r3, r2
 8003436:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f040 8086 	bne.w	800354c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003440:	4b45      	ldr	r3, [pc, #276]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a44      	ldr	r2, [pc, #272]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003446:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800344a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800344c:	f7fd fe98 	bl	8001180 <HAL_GetTick>
 8003450:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003452:	e009      	b.n	8003468 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003454:	f7fd fe94 	bl	8001180 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d902      	bls.n	8003468 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	73fb      	strb	r3, [r7, #15]
        break;
 8003466:	e005      	b.n	8003474 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003468:	4b3b      	ldr	r3, [pc, #236]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1ef      	bne.n	8003454 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d168      	bne.n	800354c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d113      	bne.n	80034a8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003480:	4b35      	ldr	r3, [pc, #212]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	4b35      	ldr	r3, [pc, #212]	@ (800355c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003486:	4013      	ands	r3, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6892      	ldr	r2, [r2, #8]
 800348c:	0211      	lsls	r1, r2, #8
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68d2      	ldr	r2, [r2, #12]
 8003492:	06d2      	lsls	r2, r2, #27
 8003494:	4311      	orrs	r1, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6852      	ldr	r2, [r2, #4]
 800349a:	3a01      	subs	r2, #1
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	430a      	orrs	r2, r1
 80034a0:	492d      	ldr	r1, [pc, #180]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	610b      	str	r3, [r1, #16]
 80034a6:	e02d      	b.n	8003504 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d115      	bne.n	80034da <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003560 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6892      	ldr	r2, [r2, #8]
 80034ba:	0211      	lsls	r1, r2, #8
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6912      	ldr	r2, [r2, #16]
 80034c0:	0852      	lsrs	r2, r2, #1
 80034c2:	3a01      	subs	r2, #1
 80034c4:	0552      	lsls	r2, r2, #21
 80034c6:	4311      	orrs	r1, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6852      	ldr	r2, [r2, #4]
 80034cc:	3a01      	subs	r2, #1
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	430a      	orrs	r2, r1
 80034d2:	4921      	ldr	r1, [pc, #132]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	610b      	str	r3, [r1, #16]
 80034d8:	e014      	b.n	8003504 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034da:	4b1f      	ldr	r3, [pc, #124]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	4b21      	ldr	r3, [pc, #132]	@ (8003564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6892      	ldr	r2, [r2, #8]
 80034e6:	0211      	lsls	r1, r2, #8
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6952      	ldr	r2, [r2, #20]
 80034ec:	0852      	lsrs	r2, r2, #1
 80034ee:	3a01      	subs	r2, #1
 80034f0:	0652      	lsls	r2, r2, #25
 80034f2:	4311      	orrs	r1, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6852      	ldr	r2, [r2, #4]
 80034f8:	3a01      	subs	r2, #1
 80034fa:	0112      	lsls	r2, r2, #4
 80034fc:	430a      	orrs	r2, r1
 80034fe:	4916      	ldr	r1, [pc, #88]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003500:	4313      	orrs	r3, r2
 8003502:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003504:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 800350a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800350e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fd fe36 	bl	8001180 <HAL_GetTick>
 8003514:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003516:	e009      	b.n	800352c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003518:	f7fd fe32 	bl	8001180 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d902      	bls.n	800352c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	73fb      	strb	r3, [r7, #15]
          break;
 800352a:	e005      	b.n	8003538 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800352c:	4b0a      	ldr	r3, [pc, #40]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ef      	beq.n	8003518 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800353e:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	4904      	ldr	r1, [pc, #16]	@ (8003558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003548:	4313      	orrs	r3, r2
 800354a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800354c:	7bfb      	ldrb	r3, [r7, #15]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	07ff800f 	.word	0x07ff800f
 8003560:	ff9f800f 	.word	0xff9f800f
 8003564:	f9ff800f 	.word	0xf9ff800f

08003568 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003576:	4b72      	ldr	r3, [pc, #456]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00e      	beq.n	80035a0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003582:	4b6f      	ldr	r3, [pc, #444]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0203 	and.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d103      	bne.n	800359a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
       ||
 8003596:	2b00      	cmp	r3, #0
 8003598:	d142      	bne.n	8003620 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
 800359e:	e03f      	b.n	8003620 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d018      	beq.n	80035da <RCCEx_PLLSAI2_Config+0x72>
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d825      	bhi.n	80035f8 <RCCEx_PLLSAI2_Config+0x90>
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d002      	beq.n	80035b6 <RCCEx_PLLSAI2_Config+0x4e>
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d009      	beq.n	80035c8 <RCCEx_PLLSAI2_Config+0x60>
 80035b4:	e020      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035b6:	4b62      	ldr	r3, [pc, #392]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d11d      	bne.n	80035fe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c6:	e01a      	b.n	80035fe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035c8:	4b5d      	ldr	r3, [pc, #372]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d116      	bne.n	8003602 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d8:	e013      	b.n	8003602 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035da:	4b59      	ldr	r3, [pc, #356]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035e6:	4b56      	ldr	r3, [pc, #344]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035f6:	e006      	b.n	8003606 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
      break;
 80035fc:	e004      	b.n	8003608 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003606:	bf00      	nop
    }

    if(status == HAL_OK)
 8003608:	7bfb      	ldrb	r3, [r7, #15]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d108      	bne.n	8003620 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800360e:	4b4c      	ldr	r3, [pc, #304]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4949      	ldr	r1, [pc, #292]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800361c:	4313      	orrs	r3, r2
 800361e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 8086 	bne.w	8003734 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003628:	4b45      	ldr	r3, [pc, #276]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a44      	ldr	r2, [pc, #272]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800362e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003634:	f7fd fda4 	bl	8001180 <HAL_GetTick>
 8003638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800363a:	e009      	b.n	8003650 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800363c:	f7fd fda0 	bl	8001180 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d902      	bls.n	8003650 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	73fb      	strb	r3, [r7, #15]
        break;
 800364e:	e005      	b.n	800365c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003650:	4b3b      	ldr	r3, [pc, #236]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ef      	bne.n	800363c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d168      	bne.n	8003734 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d113      	bne.n	8003690 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003668:	4b35      	ldr	r3, [pc, #212]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	4b35      	ldr	r3, [pc, #212]	@ (8003744 <RCCEx_PLLSAI2_Config+0x1dc>)
 800366e:	4013      	ands	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6892      	ldr	r2, [r2, #8]
 8003674:	0211      	lsls	r1, r2, #8
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68d2      	ldr	r2, [r2, #12]
 800367a:	06d2      	lsls	r2, r2, #27
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6852      	ldr	r2, [r2, #4]
 8003682:	3a01      	subs	r2, #1
 8003684:	0112      	lsls	r2, r2, #4
 8003686:	430a      	orrs	r2, r1
 8003688:	492d      	ldr	r1, [pc, #180]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800368a:	4313      	orrs	r3, r2
 800368c:	614b      	str	r3, [r1, #20]
 800368e:	e02d      	b.n	80036ec <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d115      	bne.n	80036c2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003696:	4b2a      	ldr	r3, [pc, #168]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	4b2b      	ldr	r3, [pc, #172]	@ (8003748 <RCCEx_PLLSAI2_Config+0x1e0>)
 800369c:	4013      	ands	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	0211      	lsls	r1, r2, #8
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6912      	ldr	r2, [r2, #16]
 80036a8:	0852      	lsrs	r2, r2, #1
 80036aa:	3a01      	subs	r2, #1
 80036ac:	0552      	lsls	r2, r2, #21
 80036ae:	4311      	orrs	r1, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6852      	ldr	r2, [r2, #4]
 80036b4:	3a01      	subs	r2, #1
 80036b6:	0112      	lsls	r2, r2, #4
 80036b8:	430a      	orrs	r2, r1
 80036ba:	4921      	ldr	r1, [pc, #132]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	614b      	str	r3, [r1, #20]
 80036c0:	e014      	b.n	80036ec <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	4b21      	ldr	r3, [pc, #132]	@ (800374c <RCCEx_PLLSAI2_Config+0x1e4>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6892      	ldr	r2, [r2, #8]
 80036ce:	0211      	lsls	r1, r2, #8
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6952      	ldr	r2, [r2, #20]
 80036d4:	0852      	lsrs	r2, r2, #1
 80036d6:	3a01      	subs	r2, #1
 80036d8:	0652      	lsls	r2, r2, #25
 80036da:	4311      	orrs	r1, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6852      	ldr	r2, [r2, #4]
 80036e0:	3a01      	subs	r2, #1
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	430a      	orrs	r2, r1
 80036e6:	4916      	ldr	r1, [pc, #88]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036ec:	4b14      	ldr	r3, [pc, #80]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a13      	ldr	r2, [pc, #76]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fd fd42 	bl	8001180 <HAL_GetTick>
 80036fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036fe:	e009      	b.n	8003714 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003700:	f7fd fd3e 	bl	8001180 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d902      	bls.n	8003714 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	73fb      	strb	r3, [r7, #15]
          break;
 8003712:	e005      	b.n	8003720 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003714:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ef      	beq.n	8003700 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	4904      	ldr	r1, [pc, #16]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003734:	7bfb      	ldrb	r3, [r7, #15]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	07ff800f 	.word	0x07ff800f
 8003748:	ff9f800f 	.word	0xff9f800f
 800374c:	f9ff800f 	.word	0xf9ff800f

08003750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e042      	b.n	80037e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7fd fb2d 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2224      	movs	r2, #36	@ 0x24
 800377e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0201 	bic.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fbb2 	bl	8003f04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f8b3 	bl	800390c <UART_SetConfig>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e01b      	b.n	80037e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fc31 	bl	8004048 <UART_CheckIdleState>
 80037e6:	4603      	mov	r3, r0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	@ 0x28
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003806:	2b20      	cmp	r3, #32
 8003808:	d17b      	bne.n	8003902 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <HAL_UART_Transmit+0x26>
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e074      	b.n	8003904 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2221      	movs	r2, #33	@ 0x21
 8003826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800382a:	f7fd fca9 	bl	8001180 <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003848:	d108      	bne.n	800385c <HAL_UART_Transmit+0x6c>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e003      	b.n	8003864 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003864:	e030      	b.n	80038c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2200      	movs	r2, #0
 800386e:	2180      	movs	r1, #128	@ 0x80
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fc93 	bl	800419c <UART_WaitOnFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e03d      	b.n	8003904 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	881a      	ldrh	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800389a:	b292      	uxth	r2, r2
 800389c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3302      	adds	r3, #2
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e007      	b.n	80038b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3301      	adds	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1c8      	bne.n	8003866 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2200      	movs	r2, #0
 80038dc:	2140      	movs	r1, #64	@ 0x40
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fc5c 	bl	800419c <UART_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e006      	b.n	8003904 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e000      	b.n	8003904 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003902:	2302      	movs	r3, #2
  }
}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800390c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003910:	b08c      	sub	sp, #48	@ 0x30
 8003912:	af00      	add	r7, sp, #0
 8003914:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	431a      	orrs	r2, r3
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	431a      	orrs	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	4313      	orrs	r3, r2
 8003932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4baa      	ldr	r3, [pc, #680]	@ (8003be4 <UART_SetConfig+0x2d8>)
 800393c:	4013      	ands	r3, r2
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003944:	430b      	orrs	r3, r1
 8003946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a9f      	ldr	r2, [pc, #636]	@ (8003be8 <UART_SetConfig+0x2dc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003974:	4313      	orrs	r3, r2
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003982:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800398c:	430b      	orrs	r3, r1
 800398e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003996:	f023 010f 	bic.w	r1, r3, #15
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a90      	ldr	r2, [pc, #576]	@ (8003bec <UART_SetConfig+0x2e0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d125      	bne.n	80039fc <UART_SetConfig+0xf0>
 80039b0:	4b8f      	ldr	r3, [pc, #572]	@ (8003bf0 <UART_SetConfig+0x2e4>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d81a      	bhi.n	80039f4 <UART_SetConfig+0xe8>
 80039be:	a201      	add	r2, pc, #4	@ (adr r2, 80039c4 <UART_SetConfig+0xb8>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	080039d5 	.word	0x080039d5
 80039c8:	080039e5 	.word	0x080039e5
 80039cc:	080039dd 	.word	0x080039dd
 80039d0:	080039ed 	.word	0x080039ed
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039da:	e116      	b.n	8003c0a <UART_SetConfig+0x2fe>
 80039dc:	2302      	movs	r3, #2
 80039de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039e2:	e112      	b.n	8003c0a <UART_SetConfig+0x2fe>
 80039e4:	2304      	movs	r3, #4
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ea:	e10e      	b.n	8003c0a <UART_SetConfig+0x2fe>
 80039ec:	2308      	movs	r3, #8
 80039ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039f2:	e10a      	b.n	8003c0a <UART_SetConfig+0x2fe>
 80039f4:	2310      	movs	r3, #16
 80039f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039fa:	e106      	b.n	8003c0a <UART_SetConfig+0x2fe>
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a7c      	ldr	r2, [pc, #496]	@ (8003bf4 <UART_SetConfig+0x2e8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d138      	bne.n	8003a78 <UART_SetConfig+0x16c>
 8003a06:	4b7a      	ldr	r3, [pc, #488]	@ (8003bf0 <UART_SetConfig+0x2e4>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0c:	f003 030c 	and.w	r3, r3, #12
 8003a10:	2b0c      	cmp	r3, #12
 8003a12:	d82d      	bhi.n	8003a70 <UART_SetConfig+0x164>
 8003a14:	a201      	add	r2, pc, #4	@ (adr r2, 8003a1c <UART_SetConfig+0x110>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a51 	.word	0x08003a51
 8003a20:	08003a71 	.word	0x08003a71
 8003a24:	08003a71 	.word	0x08003a71
 8003a28:	08003a71 	.word	0x08003a71
 8003a2c:	08003a61 	.word	0x08003a61
 8003a30:	08003a71 	.word	0x08003a71
 8003a34:	08003a71 	.word	0x08003a71
 8003a38:	08003a71 	.word	0x08003a71
 8003a3c:	08003a59 	.word	0x08003a59
 8003a40:	08003a71 	.word	0x08003a71
 8003a44:	08003a71 	.word	0x08003a71
 8003a48:	08003a71 	.word	0x08003a71
 8003a4c:	08003a69 	.word	0x08003a69
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a56:	e0d8      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5e:	e0d4      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003a60:	2304      	movs	r3, #4
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a66:	e0d0      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003a68:	2308      	movs	r3, #8
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6e:	e0cc      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003a70:	2310      	movs	r3, #16
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a76:	e0c8      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf8 <UART_SetConfig+0x2ec>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d125      	bne.n	8003ace <UART_SetConfig+0x1c2>
 8003a82:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf0 <UART_SetConfig+0x2e4>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a8c:	2b30      	cmp	r3, #48	@ 0x30
 8003a8e:	d016      	beq.n	8003abe <UART_SetConfig+0x1b2>
 8003a90:	2b30      	cmp	r3, #48	@ 0x30
 8003a92:	d818      	bhi.n	8003ac6 <UART_SetConfig+0x1ba>
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d00a      	beq.n	8003aae <UART_SetConfig+0x1a2>
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d814      	bhi.n	8003ac6 <UART_SetConfig+0x1ba>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <UART_SetConfig+0x19a>
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d008      	beq.n	8003ab6 <UART_SetConfig+0x1aa>
 8003aa4:	e00f      	b.n	8003ac6 <UART_SetConfig+0x1ba>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aac:	e0ad      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ab4:	e0a9      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003abc:	e0a5      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003abe:	2308      	movs	r3, #8
 8003ac0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac4:	e0a1      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003ac6:	2310      	movs	r3, #16
 8003ac8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003acc:	e09d      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a4a      	ldr	r2, [pc, #296]	@ (8003bfc <UART_SetConfig+0x2f0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d125      	bne.n	8003b24 <UART_SetConfig+0x218>
 8003ad8:	4b45      	ldr	r3, [pc, #276]	@ (8003bf0 <UART_SetConfig+0x2e4>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ade:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ae2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ae4:	d016      	beq.n	8003b14 <UART_SetConfig+0x208>
 8003ae6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ae8:	d818      	bhi.n	8003b1c <UART_SetConfig+0x210>
 8003aea:	2b80      	cmp	r3, #128	@ 0x80
 8003aec:	d00a      	beq.n	8003b04 <UART_SetConfig+0x1f8>
 8003aee:	2b80      	cmp	r3, #128	@ 0x80
 8003af0:	d814      	bhi.n	8003b1c <UART_SetConfig+0x210>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <UART_SetConfig+0x1f0>
 8003af6:	2b40      	cmp	r3, #64	@ 0x40
 8003af8:	d008      	beq.n	8003b0c <UART_SetConfig+0x200>
 8003afa:	e00f      	b.n	8003b1c <UART_SetConfig+0x210>
 8003afc:	2300      	movs	r3, #0
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b02:	e082      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003b04:	2302      	movs	r3, #2
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b0a:	e07e      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b12:	e07a      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003b14:	2308      	movs	r3, #8
 8003b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1a:	e076      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b22:	e072      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a35      	ldr	r2, [pc, #212]	@ (8003c00 <UART_SetConfig+0x2f4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d12a      	bne.n	8003b84 <UART_SetConfig+0x278>
 8003b2e:	4b30      	ldr	r3, [pc, #192]	@ (8003bf0 <UART_SetConfig+0x2e4>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b3c:	d01a      	beq.n	8003b74 <UART_SetConfig+0x268>
 8003b3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b42:	d81b      	bhi.n	8003b7c <UART_SetConfig+0x270>
 8003b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b48:	d00c      	beq.n	8003b64 <UART_SetConfig+0x258>
 8003b4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b4e:	d815      	bhi.n	8003b7c <UART_SetConfig+0x270>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <UART_SetConfig+0x250>
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b58:	d008      	beq.n	8003b6c <UART_SetConfig+0x260>
 8003b5a:	e00f      	b.n	8003b7c <UART_SetConfig+0x270>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b62:	e052      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003b64:	2302      	movs	r3, #2
 8003b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b6a:	e04e      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b72:	e04a      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003b74:	2308      	movs	r3, #8
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7a:	e046      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b82:	e042      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a17      	ldr	r2, [pc, #92]	@ (8003be8 <UART_SetConfig+0x2dc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d13a      	bne.n	8003c04 <UART_SetConfig+0x2f8>
 8003b8e:	4b18      	ldr	r3, [pc, #96]	@ (8003bf0 <UART_SetConfig+0x2e4>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b9c:	d01a      	beq.n	8003bd4 <UART_SetConfig+0x2c8>
 8003b9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ba2:	d81b      	bhi.n	8003bdc <UART_SetConfig+0x2d0>
 8003ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba8:	d00c      	beq.n	8003bc4 <UART_SetConfig+0x2b8>
 8003baa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bae:	d815      	bhi.n	8003bdc <UART_SetConfig+0x2d0>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <UART_SetConfig+0x2b0>
 8003bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb8:	d008      	beq.n	8003bcc <UART_SetConfig+0x2c0>
 8003bba:	e00f      	b.n	8003bdc <UART_SetConfig+0x2d0>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bc2:	e022      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bca:	e01e      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003bcc:	2304      	movs	r3, #4
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bd2:	e01a      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bda:	e016      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003bdc:	2310      	movs	r3, #16
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be2:	e012      	b.n	8003c0a <UART_SetConfig+0x2fe>
 8003be4:	cfff69f3 	.word	0xcfff69f3
 8003be8:	40008000 	.word	0x40008000
 8003bec:	40013800 	.word	0x40013800
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40004400 	.word	0x40004400
 8003bf8:	40004800 	.word	0x40004800
 8003bfc:	40004c00 	.word	0x40004c00
 8003c00:	40005000 	.word	0x40005000
 8003c04:	2310      	movs	r3, #16
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4aae      	ldr	r2, [pc, #696]	@ (8003ec8 <UART_SetConfig+0x5bc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	f040 8097 	bne.w	8003d44 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d823      	bhi.n	8003c66 <UART_SetConfig+0x35a>
 8003c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <UART_SetConfig+0x318>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c49 	.word	0x08003c49
 8003c28:	08003c67 	.word	0x08003c67
 8003c2c:	08003c51 	.word	0x08003c51
 8003c30:	08003c67 	.word	0x08003c67
 8003c34:	08003c57 	.word	0x08003c57
 8003c38:	08003c67 	.word	0x08003c67
 8003c3c:	08003c67 	.word	0x08003c67
 8003c40:	08003c67 	.word	0x08003c67
 8003c44:	08003c5f 	.word	0x08003c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c48:	f7fe ff7e 	bl	8002b48 <HAL_RCC_GetPCLK1Freq>
 8003c4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c4e:	e010      	b.n	8003c72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c50:	4b9e      	ldr	r3, [pc, #632]	@ (8003ecc <UART_SetConfig+0x5c0>)
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c54:	e00d      	b.n	8003c72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c56:	f7fe fedf 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 8003c5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c5c:	e009      	b.n	8003c72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c64:	e005      	b.n	8003c72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8130 	beq.w	8003eda <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	4a94      	ldr	r2, [pc, #592]	@ (8003ed0 <UART_SetConfig+0x5c4>)
 8003c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c84:	461a      	mov	r2, r3
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	4413      	add	r3, r2
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d305      	bcc.n	8003caa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d903      	bls.n	8003cb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003cb0:	e113      	b.n	8003eda <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	60fa      	str	r2, [r7, #12]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	4a84      	ldr	r2, [pc, #528]	@ (8003ed0 <UART_SetConfig+0x5c4>)
 8003cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cd4:	f7fc fae4 	bl	80002a0 <__aeabi_uldivmod>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	020b      	lsls	r3, r1, #8
 8003cea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003cee:	0202      	lsls	r2, r0, #8
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	6849      	ldr	r1, [r1, #4]
 8003cf4:	0849      	lsrs	r1, r1, #1
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	eb12 0804 	adds.w	r8, r2, r4
 8003d00:	eb43 0905 	adc.w	r9, r3, r5
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	469a      	mov	sl, r3
 8003d0c:	4693      	mov	fp, r2
 8003d0e:	4652      	mov	r2, sl
 8003d10:	465b      	mov	r3, fp
 8003d12:	4640      	mov	r0, r8
 8003d14:	4649      	mov	r1, r9
 8003d16:	f7fc fac3 	bl	80002a0 <__aeabi_uldivmod>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4613      	mov	r3, r2
 8003d20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d28:	d308      	bcc.n	8003d3c <UART_SetConfig+0x430>
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d30:	d204      	bcs.n	8003d3c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6a3a      	ldr	r2, [r7, #32]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	e0ce      	b.n	8003eda <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d42:	e0ca      	b.n	8003eda <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d4c:	d166      	bne.n	8003e1c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003d4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d827      	bhi.n	8003da6 <UART_SetConfig+0x49a>
 8003d56:	a201      	add	r2, pc, #4	@ (adr r2, 8003d5c <UART_SetConfig+0x450>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d81 	.word	0x08003d81
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d91 	.word	0x08003d91
 8003d68:	08003da7 	.word	0x08003da7
 8003d6c:	08003d97 	.word	0x08003d97
 8003d70:	08003da7 	.word	0x08003da7
 8003d74:	08003da7 	.word	0x08003da7
 8003d78:	08003da7 	.word	0x08003da7
 8003d7c:	08003d9f 	.word	0x08003d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d80:	f7fe fee2 	bl	8002b48 <HAL_RCC_GetPCLK1Freq>
 8003d84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d86:	e014      	b.n	8003db2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7fe fef4 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8003d8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d8e:	e010      	b.n	8003db2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d90:	4b4e      	ldr	r3, [pc, #312]	@ (8003ecc <UART_SetConfig+0x5c0>)
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d94:	e00d      	b.n	8003db2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d96:	f7fe fe3f 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 8003d9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d9c:	e009      	b.n	8003db2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003da4:	e005      	b.n	8003db2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003db0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8090 	beq.w	8003eda <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	4a44      	ldr	r2, [pc, #272]	@ (8003ed0 <UART_SetConfig+0x5c4>)
 8003dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dcc:	005a      	lsls	r2, r3, #1
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	441a      	add	r2, r3
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	2b0f      	cmp	r3, #15
 8003de4:	d916      	bls.n	8003e14 <UART_SetConfig+0x508>
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dec:	d212      	bcs.n	8003e14 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f023 030f 	bic.w	r3, r3, #15
 8003df6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	8bfb      	ldrh	r3, [r7, #30]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	8bfa      	ldrh	r2, [r7, #30]
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	e062      	b.n	8003eda <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e1a:	e05e      	b.n	8003eda <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d828      	bhi.n	8003e76 <UART_SetConfig+0x56a>
 8003e24:	a201      	add	r2, pc, #4	@ (adr r2, 8003e2c <UART_SetConfig+0x520>)
 8003e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2a:	bf00      	nop
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e59 	.word	0x08003e59
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e77 	.word	0x08003e77
 8003e3c:	08003e67 	.word	0x08003e67
 8003e40:	08003e77 	.word	0x08003e77
 8003e44:	08003e77 	.word	0x08003e77
 8003e48:	08003e77 	.word	0x08003e77
 8003e4c:	08003e6f 	.word	0x08003e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e50:	f7fe fe7a 	bl	8002b48 <HAL_RCC_GetPCLK1Freq>
 8003e54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e56:	e014      	b.n	8003e82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e58:	f7fe fe8c 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8003e5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e5e:	e010      	b.n	8003e82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e60:	4b1a      	ldr	r3, [pc, #104]	@ (8003ecc <UART_SetConfig+0x5c0>)
 8003e62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e64:	e00d      	b.n	8003e82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e66:	f7fe fdd7 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 8003e6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e6c:	e009      	b.n	8003e82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e74:	e005      	b.n	8003e82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e80:	bf00      	nop
    }

    if (pclk != 0U)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d028      	beq.n	8003eda <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	4a10      	ldr	r2, [pc, #64]	@ (8003ed0 <UART_SetConfig+0x5c4>)
 8003e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e92:	461a      	mov	r2, r3
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	441a      	add	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eaa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	2b0f      	cmp	r3, #15
 8003eb0:	d910      	bls.n	8003ed4 <UART_SetConfig+0x5c8>
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb8:	d20c      	bcs.n	8003ed4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60da      	str	r2, [r3, #12]
 8003ec4:	e009      	b.n	8003eda <UART_SetConfig+0x5ce>
 8003ec6:	bf00      	nop
 8003ec8:	40008000 	.word	0x40008000
 8003ecc:	00f42400 	.word	0x00f42400
 8003ed0:	0800556c 	.word	0x0800556c
      }
      else
      {
        ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2200      	movs	r2, #0
 8003eee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003ef6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3730      	adds	r7, #48	@ 0x30
 8003efe:	46bd      	mov	sp, r7
 8003f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01a      	beq.n	800401a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004002:	d10a      	bne.n	800401a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	605a      	str	r2, [r3, #4]
  }
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b098      	sub	sp, #96	@ 0x60
 800404c:	af02      	add	r7, sp, #8
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004058:	f7fd f892 	bl	8001180 <HAL_GetTick>
 800405c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b08      	cmp	r3, #8
 800406a:	d12f      	bne.n	80040cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800406c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004074:	2200      	movs	r2, #0
 8004076:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f88e 	bl	800419c <UART_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d022      	beq.n	80040cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800409a:	653b      	str	r3, [r7, #80]	@ 0x50
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80040a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e6      	bne.n	8004086 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e063      	b.n	8004194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d149      	bne.n	800416e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e2:	2200      	movs	r2, #0
 80040e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f857 	bl	800419c <UART_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d03c      	beq.n	800416e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	623b      	str	r3, [r7, #32]
   return(result);
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004112:	633b      	str	r3, [r7, #48]	@ 0x30
 8004114:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e6      	bne.n	80040f4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3308      	adds	r3, #8
 800412c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	60fb      	str	r3, [r7, #12]
   return(result);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f023 0301 	bic.w	r3, r3, #1
 800413c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3308      	adds	r3, #8
 8004144:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004146:	61fa      	str	r2, [r7, #28]
 8004148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	69b9      	ldr	r1, [r7, #24]
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	617b      	str	r3, [r7, #20]
   return(result);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e5      	bne.n	8004126 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e012      	b.n	8004194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3758      	adds	r7, #88	@ 0x58
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	4613      	mov	r3, r2
 80041aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ac:	e04f      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041b4:	d04b      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b6:	f7fc ffe3 	bl	8001180 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d302      	bcc.n	80041cc <UART_WaitOnFlagUntilTimeout+0x30>
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e04e      	b.n	800426e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d037      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0xb2>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b80      	cmp	r3, #128	@ 0x80
 80041e2:	d034      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0xb2>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b40      	cmp	r3, #64	@ 0x40
 80041e8:	d031      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d110      	bne.n	800421a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2208      	movs	r2, #8
 80041fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f838 	bl	8004276 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2208      	movs	r2, #8
 800420a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e029      	b.n	800426e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004228:	d111      	bne.n	800424e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f81e 	bl	8004276 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e00f      	b.n	800426e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4013      	ands	r3, r2
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	429a      	cmp	r2, r3
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	429a      	cmp	r2, r3
 800426a:	d0a0      	beq.n	80041ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004276:	b480      	push	{r7}
 8004278:	b095      	sub	sp, #84	@ 0x54
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800429c:	643b      	str	r3, [r7, #64]	@ 0x40
 800429e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e6      	bne.n	800427e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3308      	adds	r3, #8
 80042b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	61fb      	str	r3, [r7, #28]
   return(result);
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3308      	adds	r3, #8
 80042d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e3      	bne.n	80042b0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d118      	bne.n	8004322 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f023 0310 	bic.w	r3, r3, #16
 8004304:	647b      	str	r3, [r7, #68]	@ 0x44
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6979      	ldr	r1, [r7, #20]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	613b      	str	r3, [r7, #16]
   return(result);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e6      	bne.n	80042f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004336:	bf00      	nop
 8004338:	3754      	adds	r7, #84	@ 0x54
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_UARTEx_DisableFifoMode+0x16>
 8004354:	2302      	movs	r3, #2
 8004356:	e027      	b.n	80043a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2224      	movs	r2, #36	@ 0x24
 8004364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004386:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e02d      	b.n	8004428 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2224      	movs	r2, #36	@ 0x24
 80043d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f84f 	bl	80044ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004444:	2302      	movs	r3, #2
 8004446:	e02d      	b.n	80044a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2224      	movs	r2, #36	@ 0x24
 8004454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f811 	bl	80044ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d108      	bne.n	80044ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044cc:	e031      	b.n	8004532 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044ce:	2308      	movs	r3, #8
 80044d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044d2:	2308      	movs	r3, #8
 80044d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	0e5b      	lsrs	r3, r3, #25
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	0f5b      	lsrs	r3, r3, #29
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044f6:	7bbb      	ldrb	r3, [r7, #14]
 80044f8:	7b3a      	ldrb	r2, [r7, #12]
 80044fa:	4911      	ldr	r1, [pc, #68]	@ (8004540 <UARTEx_SetNbDataToProcess+0x94>)
 80044fc:	5c8a      	ldrb	r2, [r1, r2]
 80044fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004502:	7b3a      	ldrb	r2, [r7, #12]
 8004504:	490f      	ldr	r1, [pc, #60]	@ (8004544 <UARTEx_SetNbDataToProcess+0x98>)
 8004506:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004508:	fb93 f3f2 	sdiv	r3, r3, r2
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	7b7a      	ldrb	r2, [r7, #13]
 8004518:	4909      	ldr	r1, [pc, #36]	@ (8004540 <UARTEx_SetNbDataToProcess+0x94>)
 800451a:	5c8a      	ldrb	r2, [r1, r2]
 800451c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004520:	7b7a      	ldrb	r2, [r7, #13]
 8004522:	4908      	ldr	r1, [pc, #32]	@ (8004544 <UARTEx_SetNbDataToProcess+0x98>)
 8004524:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004526:	fb93 f3f2 	sdiv	r3, r3, r2
 800452a:	b29a      	uxth	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004532:	bf00      	nop
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	08005584 	.word	0x08005584
 8004544:	0800558c 	.word	0x0800558c

08004548 <std>:
 8004548:	2300      	movs	r3, #0
 800454a:	b510      	push	{r4, lr}
 800454c:	4604      	mov	r4, r0
 800454e:	e9c0 3300 	strd	r3, r3, [r0]
 8004552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004556:	6083      	str	r3, [r0, #8]
 8004558:	8181      	strh	r1, [r0, #12]
 800455a:	6643      	str	r3, [r0, #100]	@ 0x64
 800455c:	81c2      	strh	r2, [r0, #14]
 800455e:	6183      	str	r3, [r0, #24]
 8004560:	4619      	mov	r1, r3
 8004562:	2208      	movs	r2, #8
 8004564:	305c      	adds	r0, #92	@ 0x5c
 8004566:	f000 f929 	bl	80047bc <memset>
 800456a:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <std+0x58>)
 800456c:	6263      	str	r3, [r4, #36]	@ 0x24
 800456e:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <std+0x5c>)
 8004570:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004572:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <std+0x60>)
 8004574:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004576:	4b0d      	ldr	r3, [pc, #52]	@ (80045ac <std+0x64>)
 8004578:	6323      	str	r3, [r4, #48]	@ 0x30
 800457a:	4b0d      	ldr	r3, [pc, #52]	@ (80045b0 <std+0x68>)
 800457c:	6224      	str	r4, [r4, #32]
 800457e:	429c      	cmp	r4, r3
 8004580:	d006      	beq.n	8004590 <std+0x48>
 8004582:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004586:	4294      	cmp	r4, r2
 8004588:	d002      	beq.n	8004590 <std+0x48>
 800458a:	33d0      	adds	r3, #208	@ 0xd0
 800458c:	429c      	cmp	r4, r3
 800458e:	d105      	bne.n	800459c <std+0x54>
 8004590:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004598:	f000 b942 	b.w	8004820 <__retarget_lock_init_recursive>
 800459c:	bd10      	pop	{r4, pc}
 800459e:	bf00      	nop
 80045a0:	08005075 	.word	0x08005075
 80045a4:	08005097 	.word	0x08005097
 80045a8:	080050cf 	.word	0x080050cf
 80045ac:	080050f3 	.word	0x080050f3
 80045b0:	20040174 	.word	0x20040174

080045b4 <stdio_exit_handler>:
 80045b4:	4a02      	ldr	r2, [pc, #8]	@ (80045c0 <stdio_exit_handler+0xc>)
 80045b6:	4903      	ldr	r1, [pc, #12]	@ (80045c4 <stdio_exit_handler+0x10>)
 80045b8:	4803      	ldr	r0, [pc, #12]	@ (80045c8 <stdio_exit_handler+0x14>)
 80045ba:	f000 b869 	b.w	8004690 <_fwalk_sglue>
 80045be:	bf00      	nop
 80045c0:	2004000c 	.word	0x2004000c
 80045c4:	0800500d 	.word	0x0800500d
 80045c8:	2004001c 	.word	0x2004001c

080045cc <cleanup_stdio>:
 80045cc:	6841      	ldr	r1, [r0, #4]
 80045ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004600 <cleanup_stdio+0x34>)
 80045d0:	4299      	cmp	r1, r3
 80045d2:	b510      	push	{r4, lr}
 80045d4:	4604      	mov	r4, r0
 80045d6:	d001      	beq.n	80045dc <cleanup_stdio+0x10>
 80045d8:	f000 fd18 	bl	800500c <_fflush_r>
 80045dc:	68a1      	ldr	r1, [r4, #8]
 80045de:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <cleanup_stdio+0x38>)
 80045e0:	4299      	cmp	r1, r3
 80045e2:	d002      	beq.n	80045ea <cleanup_stdio+0x1e>
 80045e4:	4620      	mov	r0, r4
 80045e6:	f000 fd11 	bl	800500c <_fflush_r>
 80045ea:	68e1      	ldr	r1, [r4, #12]
 80045ec:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <cleanup_stdio+0x3c>)
 80045ee:	4299      	cmp	r1, r3
 80045f0:	d004      	beq.n	80045fc <cleanup_stdio+0x30>
 80045f2:	4620      	mov	r0, r4
 80045f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f8:	f000 bd08 	b.w	800500c <_fflush_r>
 80045fc:	bd10      	pop	{r4, pc}
 80045fe:	bf00      	nop
 8004600:	20040174 	.word	0x20040174
 8004604:	200401dc 	.word	0x200401dc
 8004608:	20040244 	.word	0x20040244

0800460c <global_stdio_init.part.0>:
 800460c:	b510      	push	{r4, lr}
 800460e:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <global_stdio_init.part.0+0x30>)
 8004610:	4c0b      	ldr	r4, [pc, #44]	@ (8004640 <global_stdio_init.part.0+0x34>)
 8004612:	4a0c      	ldr	r2, [pc, #48]	@ (8004644 <global_stdio_init.part.0+0x38>)
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	4620      	mov	r0, r4
 8004618:	2200      	movs	r2, #0
 800461a:	2104      	movs	r1, #4
 800461c:	f7ff ff94 	bl	8004548 <std>
 8004620:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004624:	2201      	movs	r2, #1
 8004626:	2109      	movs	r1, #9
 8004628:	f7ff ff8e 	bl	8004548 <std>
 800462c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004630:	2202      	movs	r2, #2
 8004632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004636:	2112      	movs	r1, #18
 8004638:	f7ff bf86 	b.w	8004548 <std>
 800463c:	200402ac 	.word	0x200402ac
 8004640:	20040174 	.word	0x20040174
 8004644:	080045b5 	.word	0x080045b5

08004648 <__sfp_lock_acquire>:
 8004648:	4801      	ldr	r0, [pc, #4]	@ (8004650 <__sfp_lock_acquire+0x8>)
 800464a:	f000 b8ea 	b.w	8004822 <__retarget_lock_acquire_recursive>
 800464e:	bf00      	nop
 8004650:	200402b1 	.word	0x200402b1

08004654 <__sfp_lock_release>:
 8004654:	4801      	ldr	r0, [pc, #4]	@ (800465c <__sfp_lock_release+0x8>)
 8004656:	f000 b8e5 	b.w	8004824 <__retarget_lock_release_recursive>
 800465a:	bf00      	nop
 800465c:	200402b1 	.word	0x200402b1

08004660 <__sinit>:
 8004660:	b510      	push	{r4, lr}
 8004662:	4604      	mov	r4, r0
 8004664:	f7ff fff0 	bl	8004648 <__sfp_lock_acquire>
 8004668:	6a23      	ldr	r3, [r4, #32]
 800466a:	b11b      	cbz	r3, 8004674 <__sinit+0x14>
 800466c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004670:	f7ff bff0 	b.w	8004654 <__sfp_lock_release>
 8004674:	4b04      	ldr	r3, [pc, #16]	@ (8004688 <__sinit+0x28>)
 8004676:	6223      	str	r3, [r4, #32]
 8004678:	4b04      	ldr	r3, [pc, #16]	@ (800468c <__sinit+0x2c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f5      	bne.n	800466c <__sinit+0xc>
 8004680:	f7ff ffc4 	bl	800460c <global_stdio_init.part.0>
 8004684:	e7f2      	b.n	800466c <__sinit+0xc>
 8004686:	bf00      	nop
 8004688:	080045cd 	.word	0x080045cd
 800468c:	200402ac 	.word	0x200402ac

08004690 <_fwalk_sglue>:
 8004690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004694:	4607      	mov	r7, r0
 8004696:	4688      	mov	r8, r1
 8004698:	4614      	mov	r4, r2
 800469a:	2600      	movs	r6, #0
 800469c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046a0:	f1b9 0901 	subs.w	r9, r9, #1
 80046a4:	d505      	bpl.n	80046b2 <_fwalk_sglue+0x22>
 80046a6:	6824      	ldr	r4, [r4, #0]
 80046a8:	2c00      	cmp	r4, #0
 80046aa:	d1f7      	bne.n	800469c <_fwalk_sglue+0xc>
 80046ac:	4630      	mov	r0, r6
 80046ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046b2:	89ab      	ldrh	r3, [r5, #12]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d907      	bls.n	80046c8 <_fwalk_sglue+0x38>
 80046b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046bc:	3301      	adds	r3, #1
 80046be:	d003      	beq.n	80046c8 <_fwalk_sglue+0x38>
 80046c0:	4629      	mov	r1, r5
 80046c2:	4638      	mov	r0, r7
 80046c4:	47c0      	blx	r8
 80046c6:	4306      	orrs	r6, r0
 80046c8:	3568      	adds	r5, #104	@ 0x68
 80046ca:	e7e9      	b.n	80046a0 <_fwalk_sglue+0x10>

080046cc <iprintf>:
 80046cc:	b40f      	push	{r0, r1, r2, r3}
 80046ce:	b507      	push	{r0, r1, r2, lr}
 80046d0:	4906      	ldr	r1, [pc, #24]	@ (80046ec <iprintf+0x20>)
 80046d2:	ab04      	add	r3, sp, #16
 80046d4:	6808      	ldr	r0, [r1, #0]
 80046d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80046da:	6881      	ldr	r1, [r0, #8]
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	f000 f8cb 	bl	8004878 <_vfiprintf_r>
 80046e2:	b003      	add	sp, #12
 80046e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80046e8:	b004      	add	sp, #16
 80046ea:	4770      	bx	lr
 80046ec:	20040018 	.word	0x20040018

080046f0 <putchar>:
 80046f0:	4b02      	ldr	r3, [pc, #8]	@ (80046fc <putchar+0xc>)
 80046f2:	4601      	mov	r1, r0
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	6882      	ldr	r2, [r0, #8]
 80046f8:	f000 bdf6 	b.w	80052e8 <_putc_r>
 80046fc:	20040018 	.word	0x20040018

08004700 <_puts_r>:
 8004700:	6a03      	ldr	r3, [r0, #32]
 8004702:	b570      	push	{r4, r5, r6, lr}
 8004704:	6884      	ldr	r4, [r0, #8]
 8004706:	4605      	mov	r5, r0
 8004708:	460e      	mov	r6, r1
 800470a:	b90b      	cbnz	r3, 8004710 <_puts_r+0x10>
 800470c:	f7ff ffa8 	bl	8004660 <__sinit>
 8004710:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004712:	07db      	lsls	r3, r3, #31
 8004714:	d405      	bmi.n	8004722 <_puts_r+0x22>
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	0598      	lsls	r0, r3, #22
 800471a:	d402      	bmi.n	8004722 <_puts_r+0x22>
 800471c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800471e:	f000 f880 	bl	8004822 <__retarget_lock_acquire_recursive>
 8004722:	89a3      	ldrh	r3, [r4, #12]
 8004724:	0719      	lsls	r1, r3, #28
 8004726:	d502      	bpl.n	800472e <_puts_r+0x2e>
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d135      	bne.n	800479a <_puts_r+0x9a>
 800472e:	4621      	mov	r1, r4
 8004730:	4628      	mov	r0, r5
 8004732:	f000 fd21 	bl	8005178 <__swsetup_r>
 8004736:	b380      	cbz	r0, 800479a <_puts_r+0x9a>
 8004738:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800473c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800473e:	07da      	lsls	r2, r3, #31
 8004740:	d405      	bmi.n	800474e <_puts_r+0x4e>
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	059b      	lsls	r3, r3, #22
 8004746:	d402      	bmi.n	800474e <_puts_r+0x4e>
 8004748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800474a:	f000 f86b 	bl	8004824 <__retarget_lock_release_recursive>
 800474e:	4628      	mov	r0, r5
 8004750:	bd70      	pop	{r4, r5, r6, pc}
 8004752:	2b00      	cmp	r3, #0
 8004754:	da04      	bge.n	8004760 <_puts_r+0x60>
 8004756:	69a2      	ldr	r2, [r4, #24]
 8004758:	429a      	cmp	r2, r3
 800475a:	dc17      	bgt.n	800478c <_puts_r+0x8c>
 800475c:	290a      	cmp	r1, #10
 800475e:	d015      	beq.n	800478c <_puts_r+0x8c>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	6022      	str	r2, [r4, #0]
 8004766:	7019      	strb	r1, [r3, #0]
 8004768:	68a3      	ldr	r3, [r4, #8]
 800476a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800476e:	3b01      	subs	r3, #1
 8004770:	60a3      	str	r3, [r4, #8]
 8004772:	2900      	cmp	r1, #0
 8004774:	d1ed      	bne.n	8004752 <_puts_r+0x52>
 8004776:	2b00      	cmp	r3, #0
 8004778:	da11      	bge.n	800479e <_puts_r+0x9e>
 800477a:	4622      	mov	r2, r4
 800477c:	210a      	movs	r1, #10
 800477e:	4628      	mov	r0, r5
 8004780:	f000 fcbb 	bl	80050fa <__swbuf_r>
 8004784:	3001      	adds	r0, #1
 8004786:	d0d7      	beq.n	8004738 <_puts_r+0x38>
 8004788:	250a      	movs	r5, #10
 800478a:	e7d7      	b.n	800473c <_puts_r+0x3c>
 800478c:	4622      	mov	r2, r4
 800478e:	4628      	mov	r0, r5
 8004790:	f000 fcb3 	bl	80050fa <__swbuf_r>
 8004794:	3001      	adds	r0, #1
 8004796:	d1e7      	bne.n	8004768 <_puts_r+0x68>
 8004798:	e7ce      	b.n	8004738 <_puts_r+0x38>
 800479a:	3e01      	subs	r6, #1
 800479c:	e7e4      	b.n	8004768 <_puts_r+0x68>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	6022      	str	r2, [r4, #0]
 80047a4:	220a      	movs	r2, #10
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e7ee      	b.n	8004788 <_puts_r+0x88>
	...

080047ac <puts>:
 80047ac:	4b02      	ldr	r3, [pc, #8]	@ (80047b8 <puts+0xc>)
 80047ae:	4601      	mov	r1, r0
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	f7ff bfa5 	b.w	8004700 <_puts_r>
 80047b6:	bf00      	nop
 80047b8:	20040018 	.word	0x20040018

080047bc <memset>:
 80047bc:	4402      	add	r2, r0
 80047be:	4603      	mov	r3, r0
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d100      	bne.n	80047c6 <memset+0xa>
 80047c4:	4770      	bx	lr
 80047c6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ca:	e7f9      	b.n	80047c0 <memset+0x4>

080047cc <__errno>:
 80047cc:	4b01      	ldr	r3, [pc, #4]	@ (80047d4 <__errno+0x8>)
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20040018 	.word	0x20040018

080047d8 <__libc_init_array>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	4d0d      	ldr	r5, [pc, #52]	@ (8004810 <__libc_init_array+0x38>)
 80047dc:	4c0d      	ldr	r4, [pc, #52]	@ (8004814 <__libc_init_array+0x3c>)
 80047de:	1b64      	subs	r4, r4, r5
 80047e0:	10a4      	asrs	r4, r4, #2
 80047e2:	2600      	movs	r6, #0
 80047e4:	42a6      	cmp	r6, r4
 80047e6:	d109      	bne.n	80047fc <__libc_init_array+0x24>
 80047e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004818 <__libc_init_array+0x40>)
 80047ea:	4c0c      	ldr	r4, [pc, #48]	@ (800481c <__libc_init_array+0x44>)
 80047ec:	f000 fe72 	bl	80054d4 <_init>
 80047f0:	1b64      	subs	r4, r4, r5
 80047f2:	10a4      	asrs	r4, r4, #2
 80047f4:	2600      	movs	r6, #0
 80047f6:	42a6      	cmp	r6, r4
 80047f8:	d105      	bne.n	8004806 <__libc_init_array+0x2e>
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004800:	4798      	blx	r3
 8004802:	3601      	adds	r6, #1
 8004804:	e7ee      	b.n	80047e4 <__libc_init_array+0xc>
 8004806:	f855 3b04 	ldr.w	r3, [r5], #4
 800480a:	4798      	blx	r3
 800480c:	3601      	adds	r6, #1
 800480e:	e7f2      	b.n	80047f6 <__libc_init_array+0x1e>
 8004810:	080055d0 	.word	0x080055d0
 8004814:	080055d0 	.word	0x080055d0
 8004818:	080055d0 	.word	0x080055d0
 800481c:	080055d4 	.word	0x080055d4

08004820 <__retarget_lock_init_recursive>:
 8004820:	4770      	bx	lr

08004822 <__retarget_lock_acquire_recursive>:
 8004822:	4770      	bx	lr

08004824 <__retarget_lock_release_recursive>:
 8004824:	4770      	bx	lr

08004826 <__sfputc_r>:
 8004826:	6893      	ldr	r3, [r2, #8]
 8004828:	3b01      	subs	r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	b410      	push	{r4}
 800482e:	6093      	str	r3, [r2, #8]
 8004830:	da08      	bge.n	8004844 <__sfputc_r+0x1e>
 8004832:	6994      	ldr	r4, [r2, #24]
 8004834:	42a3      	cmp	r3, r4
 8004836:	db01      	blt.n	800483c <__sfputc_r+0x16>
 8004838:	290a      	cmp	r1, #10
 800483a:	d103      	bne.n	8004844 <__sfputc_r+0x1e>
 800483c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004840:	f000 bc5b 	b.w	80050fa <__swbuf_r>
 8004844:	6813      	ldr	r3, [r2, #0]
 8004846:	1c58      	adds	r0, r3, #1
 8004848:	6010      	str	r0, [r2, #0]
 800484a:	7019      	strb	r1, [r3, #0]
 800484c:	4608      	mov	r0, r1
 800484e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004852:	4770      	bx	lr

08004854 <__sfputs_r>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	4606      	mov	r6, r0
 8004858:	460f      	mov	r7, r1
 800485a:	4614      	mov	r4, r2
 800485c:	18d5      	adds	r5, r2, r3
 800485e:	42ac      	cmp	r4, r5
 8004860:	d101      	bne.n	8004866 <__sfputs_r+0x12>
 8004862:	2000      	movs	r0, #0
 8004864:	e007      	b.n	8004876 <__sfputs_r+0x22>
 8004866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800486a:	463a      	mov	r2, r7
 800486c:	4630      	mov	r0, r6
 800486e:	f7ff ffda 	bl	8004826 <__sfputc_r>
 8004872:	1c43      	adds	r3, r0, #1
 8004874:	d1f3      	bne.n	800485e <__sfputs_r+0xa>
 8004876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004878 <_vfiprintf_r>:
 8004878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487c:	460d      	mov	r5, r1
 800487e:	b09d      	sub	sp, #116	@ 0x74
 8004880:	4614      	mov	r4, r2
 8004882:	4698      	mov	r8, r3
 8004884:	4606      	mov	r6, r0
 8004886:	b118      	cbz	r0, 8004890 <_vfiprintf_r+0x18>
 8004888:	6a03      	ldr	r3, [r0, #32]
 800488a:	b90b      	cbnz	r3, 8004890 <_vfiprintf_r+0x18>
 800488c:	f7ff fee8 	bl	8004660 <__sinit>
 8004890:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004892:	07d9      	lsls	r1, r3, #31
 8004894:	d405      	bmi.n	80048a2 <_vfiprintf_r+0x2a>
 8004896:	89ab      	ldrh	r3, [r5, #12]
 8004898:	059a      	lsls	r2, r3, #22
 800489a:	d402      	bmi.n	80048a2 <_vfiprintf_r+0x2a>
 800489c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800489e:	f7ff ffc0 	bl	8004822 <__retarget_lock_acquire_recursive>
 80048a2:	89ab      	ldrh	r3, [r5, #12]
 80048a4:	071b      	lsls	r3, r3, #28
 80048a6:	d501      	bpl.n	80048ac <_vfiprintf_r+0x34>
 80048a8:	692b      	ldr	r3, [r5, #16]
 80048aa:	b99b      	cbnz	r3, 80048d4 <_vfiprintf_r+0x5c>
 80048ac:	4629      	mov	r1, r5
 80048ae:	4630      	mov	r0, r6
 80048b0:	f000 fc62 	bl	8005178 <__swsetup_r>
 80048b4:	b170      	cbz	r0, 80048d4 <_vfiprintf_r+0x5c>
 80048b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048b8:	07dc      	lsls	r4, r3, #31
 80048ba:	d504      	bpl.n	80048c6 <_vfiprintf_r+0x4e>
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048c0:	b01d      	add	sp, #116	@ 0x74
 80048c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c6:	89ab      	ldrh	r3, [r5, #12]
 80048c8:	0598      	lsls	r0, r3, #22
 80048ca:	d4f7      	bmi.n	80048bc <_vfiprintf_r+0x44>
 80048cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048ce:	f7ff ffa9 	bl	8004824 <__retarget_lock_release_recursive>
 80048d2:	e7f3      	b.n	80048bc <_vfiprintf_r+0x44>
 80048d4:	2300      	movs	r3, #0
 80048d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80048d8:	2320      	movs	r3, #32
 80048da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048de:	f8cd 800c 	str.w	r8, [sp, #12]
 80048e2:	2330      	movs	r3, #48	@ 0x30
 80048e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004a94 <_vfiprintf_r+0x21c>
 80048e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048ec:	f04f 0901 	mov.w	r9, #1
 80048f0:	4623      	mov	r3, r4
 80048f2:	469a      	mov	sl, r3
 80048f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048f8:	b10a      	cbz	r2, 80048fe <_vfiprintf_r+0x86>
 80048fa:	2a25      	cmp	r2, #37	@ 0x25
 80048fc:	d1f9      	bne.n	80048f2 <_vfiprintf_r+0x7a>
 80048fe:	ebba 0b04 	subs.w	fp, sl, r4
 8004902:	d00b      	beq.n	800491c <_vfiprintf_r+0xa4>
 8004904:	465b      	mov	r3, fp
 8004906:	4622      	mov	r2, r4
 8004908:	4629      	mov	r1, r5
 800490a:	4630      	mov	r0, r6
 800490c:	f7ff ffa2 	bl	8004854 <__sfputs_r>
 8004910:	3001      	adds	r0, #1
 8004912:	f000 80a7 	beq.w	8004a64 <_vfiprintf_r+0x1ec>
 8004916:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004918:	445a      	add	r2, fp
 800491a:	9209      	str	r2, [sp, #36]	@ 0x24
 800491c:	f89a 3000 	ldrb.w	r3, [sl]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 809f 	beq.w	8004a64 <_vfiprintf_r+0x1ec>
 8004926:	2300      	movs	r3, #0
 8004928:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800492c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004930:	f10a 0a01 	add.w	sl, sl, #1
 8004934:	9304      	str	r3, [sp, #16]
 8004936:	9307      	str	r3, [sp, #28]
 8004938:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800493c:	931a      	str	r3, [sp, #104]	@ 0x68
 800493e:	4654      	mov	r4, sl
 8004940:	2205      	movs	r2, #5
 8004942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004946:	4853      	ldr	r0, [pc, #332]	@ (8004a94 <_vfiprintf_r+0x21c>)
 8004948:	f7fb fc5a 	bl	8000200 <memchr>
 800494c:	9a04      	ldr	r2, [sp, #16]
 800494e:	b9d8      	cbnz	r0, 8004988 <_vfiprintf_r+0x110>
 8004950:	06d1      	lsls	r1, r2, #27
 8004952:	bf44      	itt	mi
 8004954:	2320      	movmi	r3, #32
 8004956:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800495a:	0713      	lsls	r3, r2, #28
 800495c:	bf44      	itt	mi
 800495e:	232b      	movmi	r3, #43	@ 0x2b
 8004960:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004964:	f89a 3000 	ldrb.w	r3, [sl]
 8004968:	2b2a      	cmp	r3, #42	@ 0x2a
 800496a:	d015      	beq.n	8004998 <_vfiprintf_r+0x120>
 800496c:	9a07      	ldr	r2, [sp, #28]
 800496e:	4654      	mov	r4, sl
 8004970:	2000      	movs	r0, #0
 8004972:	f04f 0c0a 	mov.w	ip, #10
 8004976:	4621      	mov	r1, r4
 8004978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800497c:	3b30      	subs	r3, #48	@ 0x30
 800497e:	2b09      	cmp	r3, #9
 8004980:	d94b      	bls.n	8004a1a <_vfiprintf_r+0x1a2>
 8004982:	b1b0      	cbz	r0, 80049b2 <_vfiprintf_r+0x13a>
 8004984:	9207      	str	r2, [sp, #28]
 8004986:	e014      	b.n	80049b2 <_vfiprintf_r+0x13a>
 8004988:	eba0 0308 	sub.w	r3, r0, r8
 800498c:	fa09 f303 	lsl.w	r3, r9, r3
 8004990:	4313      	orrs	r3, r2
 8004992:	9304      	str	r3, [sp, #16]
 8004994:	46a2      	mov	sl, r4
 8004996:	e7d2      	b.n	800493e <_vfiprintf_r+0xc6>
 8004998:	9b03      	ldr	r3, [sp, #12]
 800499a:	1d19      	adds	r1, r3, #4
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	9103      	str	r1, [sp, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bfbb      	ittet	lt
 80049a4:	425b      	neglt	r3, r3
 80049a6:	f042 0202 	orrlt.w	r2, r2, #2
 80049aa:	9307      	strge	r3, [sp, #28]
 80049ac:	9307      	strlt	r3, [sp, #28]
 80049ae:	bfb8      	it	lt
 80049b0:	9204      	strlt	r2, [sp, #16]
 80049b2:	7823      	ldrb	r3, [r4, #0]
 80049b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80049b6:	d10a      	bne.n	80049ce <_vfiprintf_r+0x156>
 80049b8:	7863      	ldrb	r3, [r4, #1]
 80049ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80049bc:	d132      	bne.n	8004a24 <_vfiprintf_r+0x1ac>
 80049be:	9b03      	ldr	r3, [sp, #12]
 80049c0:	1d1a      	adds	r2, r3, #4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	9203      	str	r2, [sp, #12]
 80049c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049ca:	3402      	adds	r4, #2
 80049cc:	9305      	str	r3, [sp, #20]
 80049ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004aa4 <_vfiprintf_r+0x22c>
 80049d2:	7821      	ldrb	r1, [r4, #0]
 80049d4:	2203      	movs	r2, #3
 80049d6:	4650      	mov	r0, sl
 80049d8:	f7fb fc12 	bl	8000200 <memchr>
 80049dc:	b138      	cbz	r0, 80049ee <_vfiprintf_r+0x176>
 80049de:	9b04      	ldr	r3, [sp, #16]
 80049e0:	eba0 000a 	sub.w	r0, r0, sl
 80049e4:	2240      	movs	r2, #64	@ 0x40
 80049e6:	4082      	lsls	r2, r0
 80049e8:	4313      	orrs	r3, r2
 80049ea:	3401      	adds	r4, #1
 80049ec:	9304      	str	r3, [sp, #16]
 80049ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049f2:	4829      	ldr	r0, [pc, #164]	@ (8004a98 <_vfiprintf_r+0x220>)
 80049f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049f8:	2206      	movs	r2, #6
 80049fa:	f7fb fc01 	bl	8000200 <memchr>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d03f      	beq.n	8004a82 <_vfiprintf_r+0x20a>
 8004a02:	4b26      	ldr	r3, [pc, #152]	@ (8004a9c <_vfiprintf_r+0x224>)
 8004a04:	bb1b      	cbnz	r3, 8004a4e <_vfiprintf_r+0x1d6>
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	3307      	adds	r3, #7
 8004a0a:	f023 0307 	bic.w	r3, r3, #7
 8004a0e:	3308      	adds	r3, #8
 8004a10:	9303      	str	r3, [sp, #12]
 8004a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a14:	443b      	add	r3, r7
 8004a16:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a18:	e76a      	b.n	80048f0 <_vfiprintf_r+0x78>
 8004a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a1e:	460c      	mov	r4, r1
 8004a20:	2001      	movs	r0, #1
 8004a22:	e7a8      	b.n	8004976 <_vfiprintf_r+0xfe>
 8004a24:	2300      	movs	r3, #0
 8004a26:	3401      	adds	r4, #1
 8004a28:	9305      	str	r3, [sp, #20]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	f04f 0c0a 	mov.w	ip, #10
 8004a30:	4620      	mov	r0, r4
 8004a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a36:	3a30      	subs	r2, #48	@ 0x30
 8004a38:	2a09      	cmp	r2, #9
 8004a3a:	d903      	bls.n	8004a44 <_vfiprintf_r+0x1cc>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0c6      	beq.n	80049ce <_vfiprintf_r+0x156>
 8004a40:	9105      	str	r1, [sp, #20]
 8004a42:	e7c4      	b.n	80049ce <_vfiprintf_r+0x156>
 8004a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a48:	4604      	mov	r4, r0
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e7f0      	b.n	8004a30 <_vfiprintf_r+0x1b8>
 8004a4e:	ab03      	add	r3, sp, #12
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	462a      	mov	r2, r5
 8004a54:	4b12      	ldr	r3, [pc, #72]	@ (8004aa0 <_vfiprintf_r+0x228>)
 8004a56:	a904      	add	r1, sp, #16
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f3af 8000 	nop.w
 8004a5e:	4607      	mov	r7, r0
 8004a60:	1c78      	adds	r0, r7, #1
 8004a62:	d1d6      	bne.n	8004a12 <_vfiprintf_r+0x19a>
 8004a64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a66:	07d9      	lsls	r1, r3, #31
 8004a68:	d405      	bmi.n	8004a76 <_vfiprintf_r+0x1fe>
 8004a6a:	89ab      	ldrh	r3, [r5, #12]
 8004a6c:	059a      	lsls	r2, r3, #22
 8004a6e:	d402      	bmi.n	8004a76 <_vfiprintf_r+0x1fe>
 8004a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a72:	f7ff fed7 	bl	8004824 <__retarget_lock_release_recursive>
 8004a76:	89ab      	ldrh	r3, [r5, #12]
 8004a78:	065b      	lsls	r3, r3, #25
 8004a7a:	f53f af1f 	bmi.w	80048bc <_vfiprintf_r+0x44>
 8004a7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a80:	e71e      	b.n	80048c0 <_vfiprintf_r+0x48>
 8004a82:	ab03      	add	r3, sp, #12
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	462a      	mov	r2, r5
 8004a88:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <_vfiprintf_r+0x228>)
 8004a8a:	a904      	add	r1, sp, #16
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	f000 f91b 	bl	8004cc8 <_printf_i>
 8004a92:	e7e4      	b.n	8004a5e <_vfiprintf_r+0x1e6>
 8004a94:	08005594 	.word	0x08005594
 8004a98:	0800559e 	.word	0x0800559e
 8004a9c:	00000000 	.word	0x00000000
 8004aa0:	08004855 	.word	0x08004855
 8004aa4:	0800559a 	.word	0x0800559a

08004aa8 <sbrk_aligned>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	4e0f      	ldr	r6, [pc, #60]	@ (8004ae8 <sbrk_aligned+0x40>)
 8004aac:	460c      	mov	r4, r1
 8004aae:	6831      	ldr	r1, [r6, #0]
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	b911      	cbnz	r1, 8004aba <sbrk_aligned+0x12>
 8004ab4:	f000 fc80 	bl	80053b8 <_sbrk_r>
 8004ab8:	6030      	str	r0, [r6, #0]
 8004aba:	4621      	mov	r1, r4
 8004abc:	4628      	mov	r0, r5
 8004abe:	f000 fc7b 	bl	80053b8 <_sbrk_r>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	d103      	bne.n	8004ace <sbrk_aligned+0x26>
 8004ac6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004aca:	4620      	mov	r0, r4
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	1cc4      	adds	r4, r0, #3
 8004ad0:	f024 0403 	bic.w	r4, r4, #3
 8004ad4:	42a0      	cmp	r0, r4
 8004ad6:	d0f8      	beq.n	8004aca <sbrk_aligned+0x22>
 8004ad8:	1a21      	subs	r1, r4, r0
 8004ada:	4628      	mov	r0, r5
 8004adc:	f000 fc6c 	bl	80053b8 <_sbrk_r>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d1f2      	bne.n	8004aca <sbrk_aligned+0x22>
 8004ae4:	e7ef      	b.n	8004ac6 <sbrk_aligned+0x1e>
 8004ae6:	bf00      	nop
 8004ae8:	200402b4 	.word	0x200402b4

08004aec <_malloc_r>:
 8004aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004af0:	1ccd      	adds	r5, r1, #3
 8004af2:	f025 0503 	bic.w	r5, r5, #3
 8004af6:	3508      	adds	r5, #8
 8004af8:	2d0c      	cmp	r5, #12
 8004afa:	bf38      	it	cc
 8004afc:	250c      	movcc	r5, #12
 8004afe:	2d00      	cmp	r5, #0
 8004b00:	4606      	mov	r6, r0
 8004b02:	db01      	blt.n	8004b08 <_malloc_r+0x1c>
 8004b04:	42a9      	cmp	r1, r5
 8004b06:	d904      	bls.n	8004b12 <_malloc_r+0x26>
 8004b08:	230c      	movs	r3, #12
 8004b0a:	6033      	str	r3, [r6, #0]
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004be8 <_malloc_r+0xfc>
 8004b16:	f000 faa1 	bl	800505c <__malloc_lock>
 8004b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b1e:	461c      	mov	r4, r3
 8004b20:	bb44      	cbnz	r4, 8004b74 <_malloc_r+0x88>
 8004b22:	4629      	mov	r1, r5
 8004b24:	4630      	mov	r0, r6
 8004b26:	f7ff ffbf 	bl	8004aa8 <sbrk_aligned>
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	d158      	bne.n	8004be2 <_malloc_r+0xf6>
 8004b30:	f8d8 4000 	ldr.w	r4, [r8]
 8004b34:	4627      	mov	r7, r4
 8004b36:	2f00      	cmp	r7, #0
 8004b38:	d143      	bne.n	8004bc2 <_malloc_r+0xd6>
 8004b3a:	2c00      	cmp	r4, #0
 8004b3c:	d04b      	beq.n	8004bd6 <_malloc_r+0xea>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	4639      	mov	r1, r7
 8004b42:	4630      	mov	r0, r6
 8004b44:	eb04 0903 	add.w	r9, r4, r3
 8004b48:	f000 fc36 	bl	80053b8 <_sbrk_r>
 8004b4c:	4581      	cmp	r9, r0
 8004b4e:	d142      	bne.n	8004bd6 <_malloc_r+0xea>
 8004b50:	6821      	ldr	r1, [r4, #0]
 8004b52:	1a6d      	subs	r5, r5, r1
 8004b54:	4629      	mov	r1, r5
 8004b56:	4630      	mov	r0, r6
 8004b58:	f7ff ffa6 	bl	8004aa8 <sbrk_aligned>
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d03a      	beq.n	8004bd6 <_malloc_r+0xea>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	442b      	add	r3, r5
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	f8d8 3000 	ldr.w	r3, [r8]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	bb62      	cbnz	r2, 8004bc8 <_malloc_r+0xdc>
 8004b6e:	f8c8 7000 	str.w	r7, [r8]
 8004b72:	e00f      	b.n	8004b94 <_malloc_r+0xa8>
 8004b74:	6822      	ldr	r2, [r4, #0]
 8004b76:	1b52      	subs	r2, r2, r5
 8004b78:	d420      	bmi.n	8004bbc <_malloc_r+0xd0>
 8004b7a:	2a0b      	cmp	r2, #11
 8004b7c:	d917      	bls.n	8004bae <_malloc_r+0xc2>
 8004b7e:	1961      	adds	r1, r4, r5
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	6025      	str	r5, [r4, #0]
 8004b84:	bf18      	it	ne
 8004b86:	6059      	strne	r1, [r3, #4]
 8004b88:	6863      	ldr	r3, [r4, #4]
 8004b8a:	bf08      	it	eq
 8004b8c:	f8c8 1000 	streq.w	r1, [r8]
 8004b90:	5162      	str	r2, [r4, r5]
 8004b92:	604b      	str	r3, [r1, #4]
 8004b94:	4630      	mov	r0, r6
 8004b96:	f000 fa67 	bl	8005068 <__malloc_unlock>
 8004b9a:	f104 000b 	add.w	r0, r4, #11
 8004b9e:	1d23      	adds	r3, r4, #4
 8004ba0:	f020 0007 	bic.w	r0, r0, #7
 8004ba4:	1ac2      	subs	r2, r0, r3
 8004ba6:	bf1c      	itt	ne
 8004ba8:	1a1b      	subne	r3, r3, r0
 8004baa:	50a3      	strne	r3, [r4, r2]
 8004bac:	e7af      	b.n	8004b0e <_malloc_r+0x22>
 8004bae:	6862      	ldr	r2, [r4, #4]
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	bf0c      	ite	eq
 8004bb4:	f8c8 2000 	streq.w	r2, [r8]
 8004bb8:	605a      	strne	r2, [r3, #4]
 8004bba:	e7eb      	b.n	8004b94 <_malloc_r+0xa8>
 8004bbc:	4623      	mov	r3, r4
 8004bbe:	6864      	ldr	r4, [r4, #4]
 8004bc0:	e7ae      	b.n	8004b20 <_malloc_r+0x34>
 8004bc2:	463c      	mov	r4, r7
 8004bc4:	687f      	ldr	r7, [r7, #4]
 8004bc6:	e7b6      	b.n	8004b36 <_malloc_r+0x4a>
 8004bc8:	461a      	mov	r2, r3
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	d1fb      	bne.n	8004bc8 <_malloc_r+0xdc>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6053      	str	r3, [r2, #4]
 8004bd4:	e7de      	b.n	8004b94 <_malloc_r+0xa8>
 8004bd6:	230c      	movs	r3, #12
 8004bd8:	6033      	str	r3, [r6, #0]
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f000 fa44 	bl	8005068 <__malloc_unlock>
 8004be0:	e794      	b.n	8004b0c <_malloc_r+0x20>
 8004be2:	6005      	str	r5, [r0, #0]
 8004be4:	e7d6      	b.n	8004b94 <_malloc_r+0xa8>
 8004be6:	bf00      	nop
 8004be8:	200402b8 	.word	0x200402b8

08004bec <_printf_common>:
 8004bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	4616      	mov	r6, r2
 8004bf2:	4698      	mov	r8, r3
 8004bf4:	688a      	ldr	r2, [r1, #8]
 8004bf6:	690b      	ldr	r3, [r1, #16]
 8004bf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	bfb8      	it	lt
 8004c00:	4613      	movlt	r3, r2
 8004c02:	6033      	str	r3, [r6, #0]
 8004c04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c08:	4607      	mov	r7, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	b10a      	cbz	r2, 8004c12 <_printf_common+0x26>
 8004c0e:	3301      	adds	r3, #1
 8004c10:	6033      	str	r3, [r6, #0]
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	0699      	lsls	r1, r3, #26
 8004c16:	bf42      	ittt	mi
 8004c18:	6833      	ldrmi	r3, [r6, #0]
 8004c1a:	3302      	addmi	r3, #2
 8004c1c:	6033      	strmi	r3, [r6, #0]
 8004c1e:	6825      	ldr	r5, [r4, #0]
 8004c20:	f015 0506 	ands.w	r5, r5, #6
 8004c24:	d106      	bne.n	8004c34 <_printf_common+0x48>
 8004c26:	f104 0a19 	add.w	sl, r4, #25
 8004c2a:	68e3      	ldr	r3, [r4, #12]
 8004c2c:	6832      	ldr	r2, [r6, #0]
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	42ab      	cmp	r3, r5
 8004c32:	dc26      	bgt.n	8004c82 <_printf_common+0x96>
 8004c34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c38:	6822      	ldr	r2, [r4, #0]
 8004c3a:	3b00      	subs	r3, #0
 8004c3c:	bf18      	it	ne
 8004c3e:	2301      	movne	r3, #1
 8004c40:	0692      	lsls	r2, r2, #26
 8004c42:	d42b      	bmi.n	8004c9c <_printf_common+0xb0>
 8004c44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c48:	4641      	mov	r1, r8
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	47c8      	blx	r9
 8004c4e:	3001      	adds	r0, #1
 8004c50:	d01e      	beq.n	8004c90 <_printf_common+0xa4>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	6922      	ldr	r2, [r4, #16]
 8004c56:	f003 0306 	and.w	r3, r3, #6
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	bf02      	ittt	eq
 8004c5e:	68e5      	ldreq	r5, [r4, #12]
 8004c60:	6833      	ldreq	r3, [r6, #0]
 8004c62:	1aed      	subeq	r5, r5, r3
 8004c64:	68a3      	ldr	r3, [r4, #8]
 8004c66:	bf0c      	ite	eq
 8004c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c6c:	2500      	movne	r5, #0
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	bfc4      	itt	gt
 8004c72:	1a9b      	subgt	r3, r3, r2
 8004c74:	18ed      	addgt	r5, r5, r3
 8004c76:	2600      	movs	r6, #0
 8004c78:	341a      	adds	r4, #26
 8004c7a:	42b5      	cmp	r5, r6
 8004c7c:	d11a      	bne.n	8004cb4 <_printf_common+0xc8>
 8004c7e:	2000      	movs	r0, #0
 8004c80:	e008      	b.n	8004c94 <_printf_common+0xa8>
 8004c82:	2301      	movs	r3, #1
 8004c84:	4652      	mov	r2, sl
 8004c86:	4641      	mov	r1, r8
 8004c88:	4638      	mov	r0, r7
 8004c8a:	47c8      	blx	r9
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d103      	bne.n	8004c98 <_printf_common+0xac>
 8004c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c98:	3501      	adds	r5, #1
 8004c9a:	e7c6      	b.n	8004c2a <_printf_common+0x3e>
 8004c9c:	18e1      	adds	r1, r4, r3
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	2030      	movs	r0, #48	@ 0x30
 8004ca2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ca6:	4422      	add	r2, r4
 8004ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	e7c7      	b.n	8004c44 <_printf_common+0x58>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	4641      	mov	r1, r8
 8004cba:	4638      	mov	r0, r7
 8004cbc:	47c8      	blx	r9
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d0e6      	beq.n	8004c90 <_printf_common+0xa4>
 8004cc2:	3601      	adds	r6, #1
 8004cc4:	e7d9      	b.n	8004c7a <_printf_common+0x8e>
	...

08004cc8 <_printf_i>:
 8004cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ccc:	7e0f      	ldrb	r7, [r1, #24]
 8004cce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004cd0:	2f78      	cmp	r7, #120	@ 0x78
 8004cd2:	4691      	mov	r9, r2
 8004cd4:	4680      	mov	r8, r0
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	469a      	mov	sl, r3
 8004cda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cde:	d807      	bhi.n	8004cf0 <_printf_i+0x28>
 8004ce0:	2f62      	cmp	r7, #98	@ 0x62
 8004ce2:	d80a      	bhi.n	8004cfa <_printf_i+0x32>
 8004ce4:	2f00      	cmp	r7, #0
 8004ce6:	f000 80d1 	beq.w	8004e8c <_printf_i+0x1c4>
 8004cea:	2f58      	cmp	r7, #88	@ 0x58
 8004cec:	f000 80b8 	beq.w	8004e60 <_printf_i+0x198>
 8004cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cf8:	e03a      	b.n	8004d70 <_printf_i+0xa8>
 8004cfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cfe:	2b15      	cmp	r3, #21
 8004d00:	d8f6      	bhi.n	8004cf0 <_printf_i+0x28>
 8004d02:	a101      	add	r1, pc, #4	@ (adr r1, 8004d08 <_printf_i+0x40>)
 8004d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d08:	08004d61 	.word	0x08004d61
 8004d0c:	08004d75 	.word	0x08004d75
 8004d10:	08004cf1 	.word	0x08004cf1
 8004d14:	08004cf1 	.word	0x08004cf1
 8004d18:	08004cf1 	.word	0x08004cf1
 8004d1c:	08004cf1 	.word	0x08004cf1
 8004d20:	08004d75 	.word	0x08004d75
 8004d24:	08004cf1 	.word	0x08004cf1
 8004d28:	08004cf1 	.word	0x08004cf1
 8004d2c:	08004cf1 	.word	0x08004cf1
 8004d30:	08004cf1 	.word	0x08004cf1
 8004d34:	08004e73 	.word	0x08004e73
 8004d38:	08004d9f 	.word	0x08004d9f
 8004d3c:	08004e2d 	.word	0x08004e2d
 8004d40:	08004cf1 	.word	0x08004cf1
 8004d44:	08004cf1 	.word	0x08004cf1
 8004d48:	08004e95 	.word	0x08004e95
 8004d4c:	08004cf1 	.word	0x08004cf1
 8004d50:	08004d9f 	.word	0x08004d9f
 8004d54:	08004cf1 	.word	0x08004cf1
 8004d58:	08004cf1 	.word	0x08004cf1
 8004d5c:	08004e35 	.word	0x08004e35
 8004d60:	6833      	ldr	r3, [r6, #0]
 8004d62:	1d1a      	adds	r2, r3, #4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6032      	str	r2, [r6, #0]
 8004d68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d70:	2301      	movs	r3, #1
 8004d72:	e09c      	b.n	8004eae <_printf_i+0x1e6>
 8004d74:	6833      	ldr	r3, [r6, #0]
 8004d76:	6820      	ldr	r0, [r4, #0]
 8004d78:	1d19      	adds	r1, r3, #4
 8004d7a:	6031      	str	r1, [r6, #0]
 8004d7c:	0606      	lsls	r6, r0, #24
 8004d7e:	d501      	bpl.n	8004d84 <_printf_i+0xbc>
 8004d80:	681d      	ldr	r5, [r3, #0]
 8004d82:	e003      	b.n	8004d8c <_printf_i+0xc4>
 8004d84:	0645      	lsls	r5, r0, #25
 8004d86:	d5fb      	bpl.n	8004d80 <_printf_i+0xb8>
 8004d88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d8c:	2d00      	cmp	r5, #0
 8004d8e:	da03      	bge.n	8004d98 <_printf_i+0xd0>
 8004d90:	232d      	movs	r3, #45	@ 0x2d
 8004d92:	426d      	negs	r5, r5
 8004d94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d98:	4858      	ldr	r0, [pc, #352]	@ (8004efc <_printf_i+0x234>)
 8004d9a:	230a      	movs	r3, #10
 8004d9c:	e011      	b.n	8004dc2 <_printf_i+0xfa>
 8004d9e:	6821      	ldr	r1, [r4, #0]
 8004da0:	6833      	ldr	r3, [r6, #0]
 8004da2:	0608      	lsls	r0, r1, #24
 8004da4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004da8:	d402      	bmi.n	8004db0 <_printf_i+0xe8>
 8004daa:	0649      	lsls	r1, r1, #25
 8004dac:	bf48      	it	mi
 8004dae:	b2ad      	uxthmi	r5, r5
 8004db0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004db2:	4852      	ldr	r0, [pc, #328]	@ (8004efc <_printf_i+0x234>)
 8004db4:	6033      	str	r3, [r6, #0]
 8004db6:	bf14      	ite	ne
 8004db8:	230a      	movne	r3, #10
 8004dba:	2308      	moveq	r3, #8
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004dc2:	6866      	ldr	r6, [r4, #4]
 8004dc4:	60a6      	str	r6, [r4, #8]
 8004dc6:	2e00      	cmp	r6, #0
 8004dc8:	db05      	blt.n	8004dd6 <_printf_i+0x10e>
 8004dca:	6821      	ldr	r1, [r4, #0]
 8004dcc:	432e      	orrs	r6, r5
 8004dce:	f021 0104 	bic.w	r1, r1, #4
 8004dd2:	6021      	str	r1, [r4, #0]
 8004dd4:	d04b      	beq.n	8004e6e <_printf_i+0x1a6>
 8004dd6:	4616      	mov	r6, r2
 8004dd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ddc:	fb03 5711 	mls	r7, r3, r1, r5
 8004de0:	5dc7      	ldrb	r7, [r0, r7]
 8004de2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004de6:	462f      	mov	r7, r5
 8004de8:	42bb      	cmp	r3, r7
 8004dea:	460d      	mov	r5, r1
 8004dec:	d9f4      	bls.n	8004dd8 <_printf_i+0x110>
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d10b      	bne.n	8004e0a <_printf_i+0x142>
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	07df      	lsls	r7, r3, #31
 8004df6:	d508      	bpl.n	8004e0a <_printf_i+0x142>
 8004df8:	6923      	ldr	r3, [r4, #16]
 8004dfa:	6861      	ldr	r1, [r4, #4]
 8004dfc:	4299      	cmp	r1, r3
 8004dfe:	bfde      	ittt	le
 8004e00:	2330      	movle	r3, #48	@ 0x30
 8004e02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e06:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004e0a:	1b92      	subs	r2, r2, r6
 8004e0c:	6122      	str	r2, [r4, #16]
 8004e0e:	f8cd a000 	str.w	sl, [sp]
 8004e12:	464b      	mov	r3, r9
 8004e14:	aa03      	add	r2, sp, #12
 8004e16:	4621      	mov	r1, r4
 8004e18:	4640      	mov	r0, r8
 8004e1a:	f7ff fee7 	bl	8004bec <_printf_common>
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d14a      	bne.n	8004eb8 <_printf_i+0x1f0>
 8004e22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e26:	b004      	add	sp, #16
 8004e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	f043 0320 	orr.w	r3, r3, #32
 8004e32:	6023      	str	r3, [r4, #0]
 8004e34:	4832      	ldr	r0, [pc, #200]	@ (8004f00 <_printf_i+0x238>)
 8004e36:	2778      	movs	r7, #120	@ 0x78
 8004e38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	6831      	ldr	r1, [r6, #0]
 8004e40:	061f      	lsls	r7, r3, #24
 8004e42:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e46:	d402      	bmi.n	8004e4e <_printf_i+0x186>
 8004e48:	065f      	lsls	r7, r3, #25
 8004e4a:	bf48      	it	mi
 8004e4c:	b2ad      	uxthmi	r5, r5
 8004e4e:	6031      	str	r1, [r6, #0]
 8004e50:	07d9      	lsls	r1, r3, #31
 8004e52:	bf44      	itt	mi
 8004e54:	f043 0320 	orrmi.w	r3, r3, #32
 8004e58:	6023      	strmi	r3, [r4, #0]
 8004e5a:	b11d      	cbz	r5, 8004e64 <_printf_i+0x19c>
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	e7ad      	b.n	8004dbc <_printf_i+0xf4>
 8004e60:	4826      	ldr	r0, [pc, #152]	@ (8004efc <_printf_i+0x234>)
 8004e62:	e7e9      	b.n	8004e38 <_printf_i+0x170>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	f023 0320 	bic.w	r3, r3, #32
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	e7f6      	b.n	8004e5c <_printf_i+0x194>
 8004e6e:	4616      	mov	r6, r2
 8004e70:	e7bd      	b.n	8004dee <_printf_i+0x126>
 8004e72:	6833      	ldr	r3, [r6, #0]
 8004e74:	6825      	ldr	r5, [r4, #0]
 8004e76:	6961      	ldr	r1, [r4, #20]
 8004e78:	1d18      	adds	r0, r3, #4
 8004e7a:	6030      	str	r0, [r6, #0]
 8004e7c:	062e      	lsls	r6, r5, #24
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	d501      	bpl.n	8004e86 <_printf_i+0x1be>
 8004e82:	6019      	str	r1, [r3, #0]
 8004e84:	e002      	b.n	8004e8c <_printf_i+0x1c4>
 8004e86:	0668      	lsls	r0, r5, #25
 8004e88:	d5fb      	bpl.n	8004e82 <_printf_i+0x1ba>
 8004e8a:	8019      	strh	r1, [r3, #0]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	6123      	str	r3, [r4, #16]
 8004e90:	4616      	mov	r6, r2
 8004e92:	e7bc      	b.n	8004e0e <_printf_i+0x146>
 8004e94:	6833      	ldr	r3, [r6, #0]
 8004e96:	1d1a      	adds	r2, r3, #4
 8004e98:	6032      	str	r2, [r6, #0]
 8004e9a:	681e      	ldr	r6, [r3, #0]
 8004e9c:	6862      	ldr	r2, [r4, #4]
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f7fb f9ad 	bl	8000200 <memchr>
 8004ea6:	b108      	cbz	r0, 8004eac <_printf_i+0x1e4>
 8004ea8:	1b80      	subs	r0, r0, r6
 8004eaa:	6060      	str	r0, [r4, #4]
 8004eac:	6863      	ldr	r3, [r4, #4]
 8004eae:	6123      	str	r3, [r4, #16]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eb6:	e7aa      	b.n	8004e0e <_printf_i+0x146>
 8004eb8:	6923      	ldr	r3, [r4, #16]
 8004eba:	4632      	mov	r2, r6
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	47d0      	blx	sl
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d0ad      	beq.n	8004e22 <_printf_i+0x15a>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	079b      	lsls	r3, r3, #30
 8004eca:	d413      	bmi.n	8004ef4 <_printf_i+0x22c>
 8004ecc:	68e0      	ldr	r0, [r4, #12]
 8004ece:	9b03      	ldr	r3, [sp, #12]
 8004ed0:	4298      	cmp	r0, r3
 8004ed2:	bfb8      	it	lt
 8004ed4:	4618      	movlt	r0, r3
 8004ed6:	e7a6      	b.n	8004e26 <_printf_i+0x15e>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4632      	mov	r2, r6
 8004edc:	4649      	mov	r1, r9
 8004ede:	4640      	mov	r0, r8
 8004ee0:	47d0      	blx	sl
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d09d      	beq.n	8004e22 <_printf_i+0x15a>
 8004ee6:	3501      	adds	r5, #1
 8004ee8:	68e3      	ldr	r3, [r4, #12]
 8004eea:	9903      	ldr	r1, [sp, #12]
 8004eec:	1a5b      	subs	r3, r3, r1
 8004eee:	42ab      	cmp	r3, r5
 8004ef0:	dcf2      	bgt.n	8004ed8 <_printf_i+0x210>
 8004ef2:	e7eb      	b.n	8004ecc <_printf_i+0x204>
 8004ef4:	2500      	movs	r5, #0
 8004ef6:	f104 0619 	add.w	r6, r4, #25
 8004efa:	e7f5      	b.n	8004ee8 <_printf_i+0x220>
 8004efc:	080055a5 	.word	0x080055a5
 8004f00:	080055b6 	.word	0x080055b6

08004f04 <__sflush_r>:
 8004f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0c:	0716      	lsls	r6, r2, #28
 8004f0e:	4605      	mov	r5, r0
 8004f10:	460c      	mov	r4, r1
 8004f12:	d454      	bmi.n	8004fbe <__sflush_r+0xba>
 8004f14:	684b      	ldr	r3, [r1, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	dc02      	bgt.n	8004f20 <__sflush_r+0x1c>
 8004f1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	dd48      	ble.n	8004fb2 <__sflush_r+0xae>
 8004f20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f22:	2e00      	cmp	r6, #0
 8004f24:	d045      	beq.n	8004fb2 <__sflush_r+0xae>
 8004f26:	2300      	movs	r3, #0
 8004f28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f2c:	682f      	ldr	r7, [r5, #0]
 8004f2e:	6a21      	ldr	r1, [r4, #32]
 8004f30:	602b      	str	r3, [r5, #0]
 8004f32:	d030      	beq.n	8004f96 <__sflush_r+0x92>
 8004f34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	0759      	lsls	r1, r3, #29
 8004f3a:	d505      	bpl.n	8004f48 <__sflush_r+0x44>
 8004f3c:	6863      	ldr	r3, [r4, #4]
 8004f3e:	1ad2      	subs	r2, r2, r3
 8004f40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f42:	b10b      	cbz	r3, 8004f48 <__sflush_r+0x44>
 8004f44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f46:	1ad2      	subs	r2, r2, r3
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f4c:	6a21      	ldr	r1, [r4, #32]
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b0      	blx	r6
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	d106      	bne.n	8004f66 <__sflush_r+0x62>
 8004f58:	6829      	ldr	r1, [r5, #0]
 8004f5a:	291d      	cmp	r1, #29
 8004f5c:	d82b      	bhi.n	8004fb6 <__sflush_r+0xb2>
 8004f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8005008 <__sflush_r+0x104>)
 8004f60:	40ca      	lsrs	r2, r1
 8004f62:	07d6      	lsls	r6, r2, #31
 8004f64:	d527      	bpl.n	8004fb6 <__sflush_r+0xb2>
 8004f66:	2200      	movs	r2, #0
 8004f68:	6062      	str	r2, [r4, #4]
 8004f6a:	04d9      	lsls	r1, r3, #19
 8004f6c:	6922      	ldr	r2, [r4, #16]
 8004f6e:	6022      	str	r2, [r4, #0]
 8004f70:	d504      	bpl.n	8004f7c <__sflush_r+0x78>
 8004f72:	1c42      	adds	r2, r0, #1
 8004f74:	d101      	bne.n	8004f7a <__sflush_r+0x76>
 8004f76:	682b      	ldr	r3, [r5, #0]
 8004f78:	b903      	cbnz	r3, 8004f7c <__sflush_r+0x78>
 8004f7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f7e:	602f      	str	r7, [r5, #0]
 8004f80:	b1b9      	cbz	r1, 8004fb2 <__sflush_r+0xae>
 8004f82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f86:	4299      	cmp	r1, r3
 8004f88:	d002      	beq.n	8004f90 <__sflush_r+0x8c>
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 fa58 	bl	8005440 <_free_r>
 8004f90:	2300      	movs	r3, #0
 8004f92:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f94:	e00d      	b.n	8004fb2 <__sflush_r+0xae>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b0      	blx	r6
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	1c50      	adds	r0, r2, #1
 8004fa0:	d1c9      	bne.n	8004f36 <__sflush_r+0x32>
 8004fa2:	682b      	ldr	r3, [r5, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0c6      	beq.n	8004f36 <__sflush_r+0x32>
 8004fa8:	2b1d      	cmp	r3, #29
 8004faa:	d001      	beq.n	8004fb0 <__sflush_r+0xac>
 8004fac:	2b16      	cmp	r3, #22
 8004fae:	d11e      	bne.n	8004fee <__sflush_r+0xea>
 8004fb0:	602f      	str	r7, [r5, #0]
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	e022      	b.n	8004ffc <__sflush_r+0xf8>
 8004fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fba:	b21b      	sxth	r3, r3
 8004fbc:	e01b      	b.n	8004ff6 <__sflush_r+0xf2>
 8004fbe:	690f      	ldr	r7, [r1, #16]
 8004fc0:	2f00      	cmp	r7, #0
 8004fc2:	d0f6      	beq.n	8004fb2 <__sflush_r+0xae>
 8004fc4:	0793      	lsls	r3, r2, #30
 8004fc6:	680e      	ldr	r6, [r1, #0]
 8004fc8:	bf08      	it	eq
 8004fca:	694b      	ldreq	r3, [r1, #20]
 8004fcc:	600f      	str	r7, [r1, #0]
 8004fce:	bf18      	it	ne
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	eba6 0807 	sub.w	r8, r6, r7
 8004fd6:	608b      	str	r3, [r1, #8]
 8004fd8:	f1b8 0f00 	cmp.w	r8, #0
 8004fdc:	dde9      	ble.n	8004fb2 <__sflush_r+0xae>
 8004fde:	6a21      	ldr	r1, [r4, #32]
 8004fe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004fe2:	4643      	mov	r3, r8
 8004fe4:	463a      	mov	r2, r7
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	47b0      	blx	r6
 8004fea:	2800      	cmp	r0, #0
 8004fec:	dc08      	bgt.n	8005000 <__sflush_r+0xfc>
 8004fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ff6:	81a3      	strh	r3, [r4, #12]
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005000:	4407      	add	r7, r0
 8005002:	eba8 0800 	sub.w	r8, r8, r0
 8005006:	e7e7      	b.n	8004fd8 <__sflush_r+0xd4>
 8005008:	20400001 	.word	0x20400001

0800500c <_fflush_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	690b      	ldr	r3, [r1, #16]
 8005010:	4605      	mov	r5, r0
 8005012:	460c      	mov	r4, r1
 8005014:	b913      	cbnz	r3, 800501c <_fflush_r+0x10>
 8005016:	2500      	movs	r5, #0
 8005018:	4628      	mov	r0, r5
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	b118      	cbz	r0, 8005026 <_fflush_r+0x1a>
 800501e:	6a03      	ldr	r3, [r0, #32]
 8005020:	b90b      	cbnz	r3, 8005026 <_fflush_r+0x1a>
 8005022:	f7ff fb1d 	bl	8004660 <__sinit>
 8005026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f3      	beq.n	8005016 <_fflush_r+0xa>
 800502e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005030:	07d0      	lsls	r0, r2, #31
 8005032:	d404      	bmi.n	800503e <_fflush_r+0x32>
 8005034:	0599      	lsls	r1, r3, #22
 8005036:	d402      	bmi.n	800503e <_fflush_r+0x32>
 8005038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800503a:	f7ff fbf2 	bl	8004822 <__retarget_lock_acquire_recursive>
 800503e:	4628      	mov	r0, r5
 8005040:	4621      	mov	r1, r4
 8005042:	f7ff ff5f 	bl	8004f04 <__sflush_r>
 8005046:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005048:	07da      	lsls	r2, r3, #31
 800504a:	4605      	mov	r5, r0
 800504c:	d4e4      	bmi.n	8005018 <_fflush_r+0xc>
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	059b      	lsls	r3, r3, #22
 8005052:	d4e1      	bmi.n	8005018 <_fflush_r+0xc>
 8005054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005056:	f7ff fbe5 	bl	8004824 <__retarget_lock_release_recursive>
 800505a:	e7dd      	b.n	8005018 <_fflush_r+0xc>

0800505c <__malloc_lock>:
 800505c:	4801      	ldr	r0, [pc, #4]	@ (8005064 <__malloc_lock+0x8>)
 800505e:	f7ff bbe0 	b.w	8004822 <__retarget_lock_acquire_recursive>
 8005062:	bf00      	nop
 8005064:	200402b0 	.word	0x200402b0

08005068 <__malloc_unlock>:
 8005068:	4801      	ldr	r0, [pc, #4]	@ (8005070 <__malloc_unlock+0x8>)
 800506a:	f7ff bbdb 	b.w	8004824 <__retarget_lock_release_recursive>
 800506e:	bf00      	nop
 8005070:	200402b0 	.word	0x200402b0

08005074 <__sread>:
 8005074:	b510      	push	{r4, lr}
 8005076:	460c      	mov	r4, r1
 8005078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507c:	f000 f98a 	bl	8005394 <_read_r>
 8005080:	2800      	cmp	r0, #0
 8005082:	bfab      	itete	ge
 8005084:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005086:	89a3      	ldrhlt	r3, [r4, #12]
 8005088:	181b      	addge	r3, r3, r0
 800508a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800508e:	bfac      	ite	ge
 8005090:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005092:	81a3      	strhlt	r3, [r4, #12]
 8005094:	bd10      	pop	{r4, pc}

08005096 <__swrite>:
 8005096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800509a:	461f      	mov	r7, r3
 800509c:	898b      	ldrh	r3, [r1, #12]
 800509e:	05db      	lsls	r3, r3, #23
 80050a0:	4605      	mov	r5, r0
 80050a2:	460c      	mov	r4, r1
 80050a4:	4616      	mov	r6, r2
 80050a6:	d505      	bpl.n	80050b4 <__swrite+0x1e>
 80050a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ac:	2302      	movs	r3, #2
 80050ae:	2200      	movs	r2, #0
 80050b0:	f000 f95e 	bl	8005370 <_lseek_r>
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	4632      	mov	r2, r6
 80050c2:	463b      	mov	r3, r7
 80050c4:	4628      	mov	r0, r5
 80050c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ca:	f000 b985 	b.w	80053d8 <_write_r>

080050ce <__sseek>:
 80050ce:	b510      	push	{r4, lr}
 80050d0:	460c      	mov	r4, r1
 80050d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d6:	f000 f94b 	bl	8005370 <_lseek_r>
 80050da:	1c43      	adds	r3, r0, #1
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	bf15      	itete	ne
 80050e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050ea:	81a3      	strheq	r3, [r4, #12]
 80050ec:	bf18      	it	ne
 80050ee:	81a3      	strhne	r3, [r4, #12]
 80050f0:	bd10      	pop	{r4, pc}

080050f2 <__sclose>:
 80050f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f6:	f000 b981 	b.w	80053fc <_close_r>

080050fa <__swbuf_r>:
 80050fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fc:	460e      	mov	r6, r1
 80050fe:	4614      	mov	r4, r2
 8005100:	4605      	mov	r5, r0
 8005102:	b118      	cbz	r0, 800510c <__swbuf_r+0x12>
 8005104:	6a03      	ldr	r3, [r0, #32]
 8005106:	b90b      	cbnz	r3, 800510c <__swbuf_r+0x12>
 8005108:	f7ff faaa 	bl	8004660 <__sinit>
 800510c:	69a3      	ldr	r3, [r4, #24]
 800510e:	60a3      	str	r3, [r4, #8]
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	071a      	lsls	r2, r3, #28
 8005114:	d501      	bpl.n	800511a <__swbuf_r+0x20>
 8005116:	6923      	ldr	r3, [r4, #16]
 8005118:	b943      	cbnz	r3, 800512c <__swbuf_r+0x32>
 800511a:	4621      	mov	r1, r4
 800511c:	4628      	mov	r0, r5
 800511e:	f000 f82b 	bl	8005178 <__swsetup_r>
 8005122:	b118      	cbz	r0, 800512c <__swbuf_r+0x32>
 8005124:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005128:	4638      	mov	r0, r7
 800512a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	6922      	ldr	r2, [r4, #16]
 8005130:	1a98      	subs	r0, r3, r2
 8005132:	6963      	ldr	r3, [r4, #20]
 8005134:	b2f6      	uxtb	r6, r6
 8005136:	4283      	cmp	r3, r0
 8005138:	4637      	mov	r7, r6
 800513a:	dc05      	bgt.n	8005148 <__swbuf_r+0x4e>
 800513c:	4621      	mov	r1, r4
 800513e:	4628      	mov	r0, r5
 8005140:	f7ff ff64 	bl	800500c <_fflush_r>
 8005144:	2800      	cmp	r0, #0
 8005146:	d1ed      	bne.n	8005124 <__swbuf_r+0x2a>
 8005148:	68a3      	ldr	r3, [r4, #8]
 800514a:	3b01      	subs	r3, #1
 800514c:	60a3      	str	r3, [r4, #8]
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	6022      	str	r2, [r4, #0]
 8005154:	701e      	strb	r6, [r3, #0]
 8005156:	6962      	ldr	r2, [r4, #20]
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	429a      	cmp	r2, r3
 800515c:	d004      	beq.n	8005168 <__swbuf_r+0x6e>
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	07db      	lsls	r3, r3, #31
 8005162:	d5e1      	bpl.n	8005128 <__swbuf_r+0x2e>
 8005164:	2e0a      	cmp	r6, #10
 8005166:	d1df      	bne.n	8005128 <__swbuf_r+0x2e>
 8005168:	4621      	mov	r1, r4
 800516a:	4628      	mov	r0, r5
 800516c:	f7ff ff4e 	bl	800500c <_fflush_r>
 8005170:	2800      	cmp	r0, #0
 8005172:	d0d9      	beq.n	8005128 <__swbuf_r+0x2e>
 8005174:	e7d6      	b.n	8005124 <__swbuf_r+0x2a>
	...

08005178 <__swsetup_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	4b29      	ldr	r3, [pc, #164]	@ (8005220 <__swsetup_r+0xa8>)
 800517c:	4605      	mov	r5, r0
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	460c      	mov	r4, r1
 8005182:	b118      	cbz	r0, 800518c <__swsetup_r+0x14>
 8005184:	6a03      	ldr	r3, [r0, #32]
 8005186:	b90b      	cbnz	r3, 800518c <__swsetup_r+0x14>
 8005188:	f7ff fa6a 	bl	8004660 <__sinit>
 800518c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005190:	0719      	lsls	r1, r3, #28
 8005192:	d422      	bmi.n	80051da <__swsetup_r+0x62>
 8005194:	06da      	lsls	r2, r3, #27
 8005196:	d407      	bmi.n	80051a8 <__swsetup_r+0x30>
 8005198:	2209      	movs	r2, #9
 800519a:	602a      	str	r2, [r5, #0]
 800519c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051a0:	81a3      	strh	r3, [r4, #12]
 80051a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051a6:	e033      	b.n	8005210 <__swsetup_r+0x98>
 80051a8:	0758      	lsls	r0, r3, #29
 80051aa:	d512      	bpl.n	80051d2 <__swsetup_r+0x5a>
 80051ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051ae:	b141      	cbz	r1, 80051c2 <__swsetup_r+0x4a>
 80051b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051b4:	4299      	cmp	r1, r3
 80051b6:	d002      	beq.n	80051be <__swsetup_r+0x46>
 80051b8:	4628      	mov	r0, r5
 80051ba:	f000 f941 	bl	8005440 <_free_r>
 80051be:	2300      	movs	r3, #0
 80051c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80051c2:	89a3      	ldrh	r3, [r4, #12]
 80051c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051c8:	81a3      	strh	r3, [r4, #12]
 80051ca:	2300      	movs	r3, #0
 80051cc:	6063      	str	r3, [r4, #4]
 80051ce:	6923      	ldr	r3, [r4, #16]
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	f043 0308 	orr.w	r3, r3, #8
 80051d8:	81a3      	strh	r3, [r4, #12]
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	b94b      	cbnz	r3, 80051f2 <__swsetup_r+0x7a>
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051e8:	d003      	beq.n	80051f2 <__swsetup_r+0x7a>
 80051ea:	4621      	mov	r1, r4
 80051ec:	4628      	mov	r0, r5
 80051ee:	f000 f83f 	bl	8005270 <__smakebuf_r>
 80051f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051f6:	f013 0201 	ands.w	r2, r3, #1
 80051fa:	d00a      	beq.n	8005212 <__swsetup_r+0x9a>
 80051fc:	2200      	movs	r2, #0
 80051fe:	60a2      	str	r2, [r4, #8]
 8005200:	6962      	ldr	r2, [r4, #20]
 8005202:	4252      	negs	r2, r2
 8005204:	61a2      	str	r2, [r4, #24]
 8005206:	6922      	ldr	r2, [r4, #16]
 8005208:	b942      	cbnz	r2, 800521c <__swsetup_r+0xa4>
 800520a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800520e:	d1c5      	bne.n	800519c <__swsetup_r+0x24>
 8005210:	bd38      	pop	{r3, r4, r5, pc}
 8005212:	0799      	lsls	r1, r3, #30
 8005214:	bf58      	it	pl
 8005216:	6962      	ldrpl	r2, [r4, #20]
 8005218:	60a2      	str	r2, [r4, #8]
 800521a:	e7f4      	b.n	8005206 <__swsetup_r+0x8e>
 800521c:	2000      	movs	r0, #0
 800521e:	e7f7      	b.n	8005210 <__swsetup_r+0x98>
 8005220:	20040018 	.word	0x20040018

08005224 <__swhatbuf_r>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	460c      	mov	r4, r1
 8005228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522c:	2900      	cmp	r1, #0
 800522e:	b096      	sub	sp, #88	@ 0x58
 8005230:	4615      	mov	r5, r2
 8005232:	461e      	mov	r6, r3
 8005234:	da0d      	bge.n	8005252 <__swhatbuf_r+0x2e>
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800523c:	f04f 0100 	mov.w	r1, #0
 8005240:	bf14      	ite	ne
 8005242:	2340      	movne	r3, #64	@ 0x40
 8005244:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005248:	2000      	movs	r0, #0
 800524a:	6031      	str	r1, [r6, #0]
 800524c:	602b      	str	r3, [r5, #0]
 800524e:	b016      	add	sp, #88	@ 0x58
 8005250:	bd70      	pop	{r4, r5, r6, pc}
 8005252:	466a      	mov	r2, sp
 8005254:	f000 f8e2 	bl	800541c <_fstat_r>
 8005258:	2800      	cmp	r0, #0
 800525a:	dbec      	blt.n	8005236 <__swhatbuf_r+0x12>
 800525c:	9901      	ldr	r1, [sp, #4]
 800525e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005262:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005266:	4259      	negs	r1, r3
 8005268:	4159      	adcs	r1, r3
 800526a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800526e:	e7eb      	b.n	8005248 <__swhatbuf_r+0x24>

08005270 <__smakebuf_r>:
 8005270:	898b      	ldrh	r3, [r1, #12]
 8005272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005274:	079d      	lsls	r5, r3, #30
 8005276:	4606      	mov	r6, r0
 8005278:	460c      	mov	r4, r1
 800527a:	d507      	bpl.n	800528c <__smakebuf_r+0x1c>
 800527c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	6123      	str	r3, [r4, #16]
 8005284:	2301      	movs	r3, #1
 8005286:	6163      	str	r3, [r4, #20]
 8005288:	b003      	add	sp, #12
 800528a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800528c:	ab01      	add	r3, sp, #4
 800528e:	466a      	mov	r2, sp
 8005290:	f7ff ffc8 	bl	8005224 <__swhatbuf_r>
 8005294:	9f00      	ldr	r7, [sp, #0]
 8005296:	4605      	mov	r5, r0
 8005298:	4639      	mov	r1, r7
 800529a:	4630      	mov	r0, r6
 800529c:	f7ff fc26 	bl	8004aec <_malloc_r>
 80052a0:	b948      	cbnz	r0, 80052b6 <__smakebuf_r+0x46>
 80052a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052a6:	059a      	lsls	r2, r3, #22
 80052a8:	d4ee      	bmi.n	8005288 <__smakebuf_r+0x18>
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	f043 0302 	orr.w	r3, r3, #2
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	e7e2      	b.n	800527c <__smakebuf_r+0xc>
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	6020      	str	r0, [r4, #0]
 80052ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052be:	81a3      	strh	r3, [r4, #12]
 80052c0:	9b01      	ldr	r3, [sp, #4]
 80052c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80052c6:	b15b      	cbz	r3, 80052e0 <__smakebuf_r+0x70>
 80052c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052cc:	4630      	mov	r0, r6
 80052ce:	f000 f83f 	bl	8005350 <_isatty_r>
 80052d2:	b128      	cbz	r0, 80052e0 <__smakebuf_r+0x70>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	81a3      	strh	r3, [r4, #12]
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	431d      	orrs	r5, r3
 80052e4:	81a5      	strh	r5, [r4, #12]
 80052e6:	e7cf      	b.n	8005288 <__smakebuf_r+0x18>

080052e8 <_putc_r>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	460d      	mov	r5, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	4606      	mov	r6, r0
 80052f0:	b118      	cbz	r0, 80052fa <_putc_r+0x12>
 80052f2:	6a03      	ldr	r3, [r0, #32]
 80052f4:	b90b      	cbnz	r3, 80052fa <_putc_r+0x12>
 80052f6:	f7ff f9b3 	bl	8004660 <__sinit>
 80052fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052fc:	07d8      	lsls	r0, r3, #31
 80052fe:	d405      	bmi.n	800530c <_putc_r+0x24>
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	0599      	lsls	r1, r3, #22
 8005304:	d402      	bmi.n	800530c <_putc_r+0x24>
 8005306:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005308:	f7ff fa8b 	bl	8004822 <__retarget_lock_acquire_recursive>
 800530c:	68a3      	ldr	r3, [r4, #8]
 800530e:	3b01      	subs	r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	60a3      	str	r3, [r4, #8]
 8005314:	da05      	bge.n	8005322 <_putc_r+0x3a>
 8005316:	69a2      	ldr	r2, [r4, #24]
 8005318:	4293      	cmp	r3, r2
 800531a:	db12      	blt.n	8005342 <_putc_r+0x5a>
 800531c:	b2eb      	uxtb	r3, r5
 800531e:	2b0a      	cmp	r3, #10
 8005320:	d00f      	beq.n	8005342 <_putc_r+0x5a>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	6022      	str	r2, [r4, #0]
 8005328:	701d      	strb	r5, [r3, #0]
 800532a:	b2ed      	uxtb	r5, r5
 800532c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800532e:	07da      	lsls	r2, r3, #31
 8005330:	d405      	bmi.n	800533e <_putc_r+0x56>
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	059b      	lsls	r3, r3, #22
 8005336:	d402      	bmi.n	800533e <_putc_r+0x56>
 8005338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800533a:	f7ff fa73 	bl	8004824 <__retarget_lock_release_recursive>
 800533e:	4628      	mov	r0, r5
 8005340:	bd70      	pop	{r4, r5, r6, pc}
 8005342:	4629      	mov	r1, r5
 8005344:	4622      	mov	r2, r4
 8005346:	4630      	mov	r0, r6
 8005348:	f7ff fed7 	bl	80050fa <__swbuf_r>
 800534c:	4605      	mov	r5, r0
 800534e:	e7ed      	b.n	800532c <_putc_r+0x44>

08005350 <_isatty_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4d06      	ldr	r5, [pc, #24]	@ (800536c <_isatty_r+0x1c>)
 8005354:	2300      	movs	r3, #0
 8005356:	4604      	mov	r4, r0
 8005358:	4608      	mov	r0, r1
 800535a:	602b      	str	r3, [r5, #0]
 800535c:	f7fb fe1e 	bl	8000f9c <_isatty>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d102      	bne.n	800536a <_isatty_r+0x1a>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	b103      	cbz	r3, 800536a <_isatty_r+0x1a>
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	200402bc 	.word	0x200402bc

08005370 <_lseek_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4d07      	ldr	r5, [pc, #28]	@ (8005390 <_lseek_r+0x20>)
 8005374:	4604      	mov	r4, r0
 8005376:	4608      	mov	r0, r1
 8005378:	4611      	mov	r1, r2
 800537a:	2200      	movs	r2, #0
 800537c:	602a      	str	r2, [r5, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	f7fb fe17 	bl	8000fb2 <_lseek>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d102      	bne.n	800538e <_lseek_r+0x1e>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	b103      	cbz	r3, 800538e <_lseek_r+0x1e>
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	bd38      	pop	{r3, r4, r5, pc}
 8005390:	200402bc 	.word	0x200402bc

08005394 <_read_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4d07      	ldr	r5, [pc, #28]	@ (80053b4 <_read_r+0x20>)
 8005398:	4604      	mov	r4, r0
 800539a:	4608      	mov	r0, r1
 800539c:	4611      	mov	r1, r2
 800539e:	2200      	movs	r2, #0
 80053a0:	602a      	str	r2, [r5, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	f7fb fda5 	bl	8000ef2 <_read>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d102      	bne.n	80053b2 <_read_r+0x1e>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	b103      	cbz	r3, 80053b2 <_read_r+0x1e>
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	200402bc 	.word	0x200402bc

080053b8 <_sbrk_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4d06      	ldr	r5, [pc, #24]	@ (80053d4 <_sbrk_r+0x1c>)
 80053bc:	2300      	movs	r3, #0
 80053be:	4604      	mov	r4, r0
 80053c0:	4608      	mov	r0, r1
 80053c2:	602b      	str	r3, [r5, #0]
 80053c4:	f7fb fe02 	bl	8000fcc <_sbrk>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d102      	bne.n	80053d2 <_sbrk_r+0x1a>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	b103      	cbz	r3, 80053d2 <_sbrk_r+0x1a>
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
 80053d4:	200402bc 	.word	0x200402bc

080053d8 <_write_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4d07      	ldr	r5, [pc, #28]	@ (80053f8 <_write_r+0x20>)
 80053dc:	4604      	mov	r4, r0
 80053de:	4608      	mov	r0, r1
 80053e0:	4611      	mov	r1, r2
 80053e2:	2200      	movs	r2, #0
 80053e4:	602a      	str	r2, [r5, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f7fb fda0 	bl	8000f2c <_write>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d102      	bne.n	80053f6 <_write_r+0x1e>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	b103      	cbz	r3, 80053f6 <_write_r+0x1e>
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	200402bc 	.word	0x200402bc

080053fc <_close_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d06      	ldr	r5, [pc, #24]	@ (8005418 <_close_r+0x1c>)
 8005400:	2300      	movs	r3, #0
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	602b      	str	r3, [r5, #0]
 8005408:	f7fb fdac 	bl	8000f64 <_close>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d102      	bne.n	8005416 <_close_r+0x1a>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	b103      	cbz	r3, 8005416 <_close_r+0x1a>
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	bd38      	pop	{r3, r4, r5, pc}
 8005418:	200402bc 	.word	0x200402bc

0800541c <_fstat_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4d07      	ldr	r5, [pc, #28]	@ (800543c <_fstat_r+0x20>)
 8005420:	2300      	movs	r3, #0
 8005422:	4604      	mov	r4, r0
 8005424:	4608      	mov	r0, r1
 8005426:	4611      	mov	r1, r2
 8005428:	602b      	str	r3, [r5, #0]
 800542a:	f7fb fda7 	bl	8000f7c <_fstat>
 800542e:	1c43      	adds	r3, r0, #1
 8005430:	d102      	bne.n	8005438 <_fstat_r+0x1c>
 8005432:	682b      	ldr	r3, [r5, #0]
 8005434:	b103      	cbz	r3, 8005438 <_fstat_r+0x1c>
 8005436:	6023      	str	r3, [r4, #0]
 8005438:	bd38      	pop	{r3, r4, r5, pc}
 800543a:	bf00      	nop
 800543c:	200402bc 	.word	0x200402bc

08005440 <_free_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4605      	mov	r5, r0
 8005444:	2900      	cmp	r1, #0
 8005446:	d041      	beq.n	80054cc <_free_r+0x8c>
 8005448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800544c:	1f0c      	subs	r4, r1, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	bfb8      	it	lt
 8005452:	18e4      	addlt	r4, r4, r3
 8005454:	f7ff fe02 	bl	800505c <__malloc_lock>
 8005458:	4a1d      	ldr	r2, [pc, #116]	@ (80054d0 <_free_r+0x90>)
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	b933      	cbnz	r3, 800546c <_free_r+0x2c>
 800545e:	6063      	str	r3, [r4, #4]
 8005460:	6014      	str	r4, [r2, #0]
 8005462:	4628      	mov	r0, r5
 8005464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005468:	f7ff bdfe 	b.w	8005068 <__malloc_unlock>
 800546c:	42a3      	cmp	r3, r4
 800546e:	d908      	bls.n	8005482 <_free_r+0x42>
 8005470:	6820      	ldr	r0, [r4, #0]
 8005472:	1821      	adds	r1, r4, r0
 8005474:	428b      	cmp	r3, r1
 8005476:	bf01      	itttt	eq
 8005478:	6819      	ldreq	r1, [r3, #0]
 800547a:	685b      	ldreq	r3, [r3, #4]
 800547c:	1809      	addeq	r1, r1, r0
 800547e:	6021      	streq	r1, [r4, #0]
 8005480:	e7ed      	b.n	800545e <_free_r+0x1e>
 8005482:	461a      	mov	r2, r3
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	b10b      	cbz	r3, 800548c <_free_r+0x4c>
 8005488:	42a3      	cmp	r3, r4
 800548a:	d9fa      	bls.n	8005482 <_free_r+0x42>
 800548c:	6811      	ldr	r1, [r2, #0]
 800548e:	1850      	adds	r0, r2, r1
 8005490:	42a0      	cmp	r0, r4
 8005492:	d10b      	bne.n	80054ac <_free_r+0x6c>
 8005494:	6820      	ldr	r0, [r4, #0]
 8005496:	4401      	add	r1, r0
 8005498:	1850      	adds	r0, r2, r1
 800549a:	4283      	cmp	r3, r0
 800549c:	6011      	str	r1, [r2, #0]
 800549e:	d1e0      	bne.n	8005462 <_free_r+0x22>
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	6053      	str	r3, [r2, #4]
 80054a6:	4408      	add	r0, r1
 80054a8:	6010      	str	r0, [r2, #0]
 80054aa:	e7da      	b.n	8005462 <_free_r+0x22>
 80054ac:	d902      	bls.n	80054b4 <_free_r+0x74>
 80054ae:	230c      	movs	r3, #12
 80054b0:	602b      	str	r3, [r5, #0]
 80054b2:	e7d6      	b.n	8005462 <_free_r+0x22>
 80054b4:	6820      	ldr	r0, [r4, #0]
 80054b6:	1821      	adds	r1, r4, r0
 80054b8:	428b      	cmp	r3, r1
 80054ba:	bf04      	itt	eq
 80054bc:	6819      	ldreq	r1, [r3, #0]
 80054be:	685b      	ldreq	r3, [r3, #4]
 80054c0:	6063      	str	r3, [r4, #4]
 80054c2:	bf04      	itt	eq
 80054c4:	1809      	addeq	r1, r1, r0
 80054c6:	6021      	streq	r1, [r4, #0]
 80054c8:	6054      	str	r4, [r2, #4]
 80054ca:	e7ca      	b.n	8005462 <_free_r+0x22>
 80054cc:	bd38      	pop	{r3, r4, r5, pc}
 80054ce:	bf00      	nop
 80054d0:	200402b8 	.word	0x200402b8

080054d4 <_init>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	bf00      	nop
 80054d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054da:	bc08      	pop	{r3}
 80054dc:	469e      	mov	lr, r3
 80054de:	4770      	bx	lr

080054e0 <_fini>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	bf00      	nop
 80054e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e6:	bc08      	pop	{r3}
 80054e8:	469e      	mov	lr, r3
 80054ea:	4770      	bx	lr
